<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[ssserver在vps服务器端自启动]]></title>
    <url>%2Fyangningbocn.github.io%2F2018%2F01%2F16%2F%E5%8E%9F-ssserver%E5%9C%A8VPS%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E8%87%AA%E5%90%AF%E5%8A%A8%2F</url>
    <content type="text"><![CDATA[系统环境:Ubuntu操作要求：能够进行基本的linux操作 说明：nohup可以让你关闭终端之后，进程依旧在后台运行，如果用&amp;，终端关闭之后进程也随之关闭。就是这样。 ##命令： 1234567891011121314151617181920212223242526272829303132331.安装pip apt-get install python-pip 2.安装shadowsocks pip install shadowsocks3. 添加配置文件sudo vim /etc/shadowsocks.json 内容如下： &#123; &quot;server&quot;:&quot;服务器的ip&quot;, &quot;server_port&quot;:19175, &quot;local_address&quot;:&quot;127.0.0.1&quot;, &quot;local_port&quot;:1080, &quot;password&quot;:&quot;密码&quot;, &quot;timeout&quot;:300, &quot;method&quot;:&quot;aes-256-cfb&quot;, &quot;fast_open&quot;:false &#125; ：wq来保存退出4.写脚本文件sudo vim /root/shadowsocks.sh 内容如下： #！/bin/bash #shadowsocks.sh ssserver -c /etc/shadowsocks.json5.开机自启动sudo vim /etc/rc.local 在exit之前输入 nohup bash /home/shadow.sh&amp; 保存退出6.reboot 加密方式改为”chacha20-ietf”优点：据说加密更牛逼，网速也牛逼。然后并没有发现哪里牛逼了，感觉也就手机快一点点吧，这可能就是玄学吧。不管怎么先把过程写出来吧。shadowsocks版本不能太低，2.x.x的版本没有chacha20、chacha20-ietf等加密方式，所以要重新装，也要装chacha20的依赖库libsodium。 这个时候要 1234567891011121314151617181920212223241.升级pippip install --upgrade pip2.升级安装工具pip install -U setuptools3.安装新的shadowsockspip install git+https://github.com/shadowsocks/shadowsocks.git@master4.安装libsodium apt-get install build-essential wget https://download.libsodium.org/libsodium/releases/LATEST.tar.gz tar zxf LATEST.tar.gz cd libsodium* ./configure make &amp;&amp; make install ldconfig5.修改配置文件sudo vim /etc/shadowsocks.json 把加密方式改为：chacha20-ietf5.reboot]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>ssserver</tag>
        <tag>shadowsocks</tag>
        <tag>nohup</tag>
        <tag>chacha20</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python连接gazebo/openAI的gym/erlerobot的gym-gazebo/google的tensorflow]]></title>
    <url>%2Fyangningbocn.github.io%2F2018%2F01%2F10%2F%E5%8E%9F-python%E8%BF%9E%E6%8E%A5gazebo-openAI%E7%9A%84gym-erlerobot%E7%9A%84gym-gazebo-google%E7%9A%84tensorflow%2F</url>
    <content type="text"><![CDATA[笔记本型号：联想Y500CPU : Intel® Core™ i7-3630QM CPU @ 2.40GHz × 8内存：7.7 GiB显卡：GeForce GT 750M/PCIe/SSE2系统版本：ubuntu 14.04 LTS 64bitROS版本：indigogazebo版本：gazebo7tensorflow：1.4.1-gpupython：2.7 中间一些令我吐血的地方：1.必须python2.7，不然要解决的问题太多了，我尝试了好久，边擦干净屏幕上的血，边把所有的东西改为了python2.72.百度不是解决问题的方法，谷歌才是，科学上网才是第一生产力3.遇到无法import rospy等ros的包的问题，请移步我的另一篇博客。在sublime text3和pycharm无法import rospy等ros Python库4.中间用到的一些工具，请移步我的另一篇博客ubuntu上我的装机必备小工具 #安装步骤 ##1.先安装gazebo7我用的是新立得软件包管理装的，很方便，当然你可以选择别的方式 ##2.安装ros请移步ROSwikiroswiki注意：这里必须安装ros-indigo-desktop版本 不要装full ##3.安装gazebo7和ros的control package在新立得软件包管理一搜就有了，关键词为：ros-indigo-gazebo7-ros把其中的都装了就好了 ##4.安装gymopenAI-gym的github按照github中的步骤来就好首先装依赖 1apt-get install -y python-numpy python-dev cmake zlib1g-dev libjpeg-dev xvfb libav-tools xorg-dev python-opengl libboost-all-dev libsdl2-dev swig 注意git clone之后要装all版本git clone https://github.com/openai/gym.git cd gym pip install -e &#39;.[all]&#39;在他的安装说明提到了Rendering on a server，这个是我之前一直在找的东西。可以在你不查屏幕的时候运行gazebo和rviz，这在我之前的博文中提到了Rendering on a serverIf you’re trying to render video on a server, you’ll need to connect a fake display. The easiest way to do this is by running under xvfb-run (on Ubuntu, install the xvfb package): 1xvfb-run -s &quot;-screen 0 1400x900x24&quot; bash ##5.gym-gazebo这个很难装，很繁琐，现在我还是比较懵逼的。不过我总结了一下经。先去看一下他的安装文档，然后不要着急。我们之前的有些已经装过了，那我们采用step-by-step的方式，安装过程中要看着setup.bash来，把不用的步骤省去参照此人的博客：理解gym-gazebo注意： 1.安装过程中可以打开gazebo.repos把系统中已经有的可以屏蔽掉。 2.如果CPU性能不是特别好，不建议那么多线程，make -j 1就好，慢点就慢点吧，然后会编译冲突错误。 3.路径的设置要根据自己安装的路径来。 ##6.tensorflow因为ros不兼容python3，所以我只能把原来的Python3的tensorflow废弃掉了。我编译安装tensorflow没成功，这里，我用pip安装的。安装过程中，不知道是网还是我的电脑的问题很多包在pip的时候会下载不下来，导致安装失败，我的应对方法是：从python官网把需要安装的whl包最新版下载下来用pip安装。pip安装whl的方法如下：1.cd到whl包所在的目录2.pip install xxxx.whl（也可以加sudo）]]></content>
      <categories>
        <category>reinforcement learning</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>ros</tag>
        <tag>gazebo</tag>
        <tag>gym</tag>
        <tag>python</tag>
        <tag>Tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ubuntu上装机必备小工具]]></title>
    <url>%2Fyangningbocn.github.io%2F2018%2F01%2F10%2F%E5%8E%9F-ubuntu%E4%B8%8A%E6%88%91%E7%9A%84%E8%A3%85%E6%9C%BA%E5%BF%85%E5%A4%87%E5%B0%8F%E5%B7%A5%E5%85%B7%2F</url>
    <content type="text"><![CDATA[1.system monitor indicator 系统监视软件 sudo add-apt-repository ppa:fossfreedom/indicator-sysmonitorsudo apt-get updatesudo apt-get install indicator-sysmonitorindicator-sysmonitor &amp; 2.touchpad-indicator一个触摸板禁用软件，插入鼠标自动禁用touchpad 3.y-ppa-manager一个可以管理ppa的软件，可以清理修复ppa 4.Terminator 一个好用的可以把一个终端分成多个终端的软件 5.新立得 这是一个Ubuntu软件包管理软件，谁用谁知道。]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>tools</tag>
        <tag>software</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python连接gazebo/openAI的gym/erlerobot的gym-gazebo/google的tensorflow]]></title>
    <url>%2Fyangningbocn.github.io%2F2018%2F01%2F10%2F%E5%8E%9F-%E5%9C%A8sublime-text3%E5%92%8Cpycharm%E6%97%A0%E6%B3%95import-rospy%E7%AD%89ros-Python%E5%BA%93%2F</url>
    <content type="text"><![CDATA[背景笔记本型号：联想Y500 CPU : Intel® Core™ i7-3630QM CPU @ 2.40GHz × 8 内存：7.7 GiB 显卡：GeForce GT 750M/PCIe/SSE2 系统版本：ubuntu 14.04 LTS 64bit 软件：sublime text 3 ;pycharm #错误情况 12import rospyImportError: No module named rospy #问题描述在pycharm和sublime下无法import rospy等模块，但是在Terminal下用命令行就可以正常运行，经过分析，原因为 /opt/ros/indigo/lib/python2.7/dist-packages 下的路径没有被添加到环境中 #解决方案 ##sublime text 31.Terminal下 cd /opt/sublime_text/Packages2.sudo gedit Python.sublime-package3.粘贴 123456789101112131415&#123; &quot;shell_cmd&quot;: &quot;python -u \&quot;$file\&quot;&quot;, &quot;file_regex&quot;: &quot;^[ ]*File \&quot;(...*?)\&quot;, line ([0-9]*)&quot;, &quot;selector&quot;: &quot;source.python&quot;, &quot;env&quot;: &#123;&quot;PYTHONPATH&quot;:&quot;/opt/ros/indigo/lib/python2.7/dist-packages&quot;&#125;, &quot;variants&quot;: [ &#123; &quot;name&quot;: &quot;Syntax Check&quot;, &quot;shell_cmd&quot;: &quot;python -m py_compile \&quot;$&#123;file&#125;\&quot;&quot;, &#125; ]&#125; ４．保存退出５．接下来，用zip命令删除C++.sublime-package中的Python.sublime-build文件：sudo zip -d Python.sublime-package Python.sublime-build6.最后将之前的Python.sublime-build添加到此时的Python.sublime-package中：sudo zip -g Python.sublime-package Python.sublime-build 重启sublime text，实验调用默认的Python build system，成功！ #pycharm1.打开File–&gt;Settings–&gt;Project:XXXX–&gt;Project Interpreter2.在Project Interpreter : Python 2.7 /usr/bin/python (顶部的位置)点击下拉箭头3.选择Show ALL…4.点击右侧第四个按钮：interpreter Paths5.点击右侧的第一个加号按钮，并在弹出的对话框中粘贴以下路径 1/opt/ros/indigo/lib/python2.7/dist-packages 6.一路ok就可以了7.然后运行一下，成功! #sublime 和pycharm的使用感受sublime实在是太轻便快捷了，用户体验极好，但是功能不够强大pycharm使用起来功能很多，比如看库的这种操作。但是有时候卡卡的。]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>ros</tag>
        <tag>gazebo</tag>
        <tag>gym</tag>
        <tag>python</tag>
        <tag>Tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TensorFlow in nvidia-docker: failed call to cuInit: CUDA_ERROR_UNKNOWN]]></title>
    <url>%2Fyangningbocn.github.io%2F2017%2F12%2F28%2F%E5%8E%9F-TensorFlow-in-nvidia-docker-failed-call-to-cuInit-CUDA-ERROR-UNKNOWN%2F</url>
    <content type="text"><![CDATA[背景：UbuntuTensorFlow 问题描述：出现错误：E TensorFlow in nvidia-docker: failed call to cuInit: CUDA_ERROR_UNKNOWN然后就用CPU在跑 解决方法： 1sudo update-alternatives --config x86_64-linux-gnu_gl_conf 选择 /usr/lib/x86_64-linux-gnu/mesa/ld.so.conf就好了作为一个强迫症，你以为这样就完了吗，不！我要把其他三个删掉这个命令是用管理员的权限打开文件浏览器，然后删除那些不用的三个选项。这三个选项是我之前安装NVIDIA驱动后并卸载的残留1sudo nautilus 在/usr/lib/下 ctrl+f 输入nvidia 然后就能找到那些不用的选项删除就OK了。]]></content>
      <categories>
        <category>reinforcement learning</category>
      </categories>
      <tags>
        <tag>TensorFlow</tag>
        <tag>nvidia</tag>
        <tag>CUDA_ERROR_UNKNOWN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[launchpad中图标显示异常]]></title>
    <url>%2Fyangningbocn.github.io%2F2017%2F12%2F28%2F%E5%8E%9F-launchpad%E4%B8%AD%E5%9B%BE%E6%A0%87%E6%98%BE%E7%A4%BA%E5%BC%82%E5%B8%B8%2F</url>
    <content type="text"><![CDATA[系统: Ubuntu14.04 问题描述:Ubuntu的launchpad(开始菜单)中图标显示错误，不能正常显示图标。 解决方案： 打开终端 cd /usr/share/applications/ls 然后找到你的图标 sudo vim *.desktop *为你的app的name [Desktop Entry] Name=Youdao Dict Name[zh_CN]=有道词典 Name[zh_TW]=有道詞典 Exec=youdao-dict %f Icon=/usr/share/youdao-dict/app/assets/youdao-dict.png Terminal=false X-MultipleArgs=false Type=Application Encoding=UTF-8 Categories=Application;Utility;Dictionary; StartupNotify=false 把Icon后面的路径改为你的图片的路径 sudo reboo]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>launchpad</tag>
        <tag>图标异常</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[map odom base_link三者关系的通俗理解]]></title>
    <url>%2Fyangningbocn.github.io%2F2017%2F12%2F22%2F%E5%8E%9F-map-odom-base-link%E4%B8%89%E8%80%85%E5%85%B3%E7%B3%BB%E7%9A%84%E9%80%9A%E4%BF%97%E7%90%86%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[为了更好的集成和重用软件模块，驱动，模型以及库的开发人员需要一个坐标系的共享公约。该坐标系的共享规约让开发者为移动基座创建驱动和模型提供了一个规范。同样，开发人员用与本规范兼容的一些移动机器人基座软件能很容易的创建相应的库和应用。 `&lt;/pre&gt; * * * 世界坐标(map)该map坐标系是一个世界固定坐标系，其Z轴指向上方。相对于map坐标系的移动平台的姿态，不应该随时间显著移动。map坐标是不连续的，这意味着在map坐标系中移动平台的姿态可以随时发生离散的跳变。典型的设置中，定位模块基于传感器的监测，不断的重新计算世界坐标中机器人的位姿，从而消除偏差，但是当新的传感器信息到达时可能会跳变。map坐标系作为长期的全局参考是很有用的，但是跳变使得对于本地传感和执行器来说，其实是一个不好的参考坐标。 里程计坐标系(odom) odom 坐标系是一个世界固定坐标系。在odom 坐标系中移动平台的位姿可以任意移动，没有任何界限。这种移动使得odom 坐标系不能作为长期的全局参考。然而，在odom 坐标系中的机器人的姿态能够保证是连续的，这意味着在odom 坐标系中的移动平台的姿态总是平滑变化，没有跳变。在一个典型设置中，odom 坐标系是基于测距源来计算的，如车轮里程计，视觉里程计或惯性测量单元。odom 坐标系作为一种精确，作为短期的本地参考是很有用的，但偏移使得它不能作为长期参考 基座标(base_link)该base_link坐标刚性地连接到移动机器人基座。base_link可以安装在基座中的任意方位；对于每个硬件平台，在基座上的不同地方都会提供一个明显的参考点。 坐标之间的关系 `在机器人系统中，我们使用一棵树来来关联所有坐标系，因此每个坐标系都有一个父坐标系和任意子坐标系，如下： map --&gt; odom --&gt; base_link 世界坐标系是odom坐标系的父，odom坐标系是base_link的父。虽然直观来说，map和odom应连接到base_link，这是不允许的，因为每坐标系只能有一个父类。 ` 坐标系权限 `odom到base_link的转换是由里程计源计算和发布的。然而，定位模块不发布map到base_link的转换(transform)。相反，定位模块先接收odom到base_link的 transform，并使用这个信息发布map到odom的transform。 通俗理解 odom和map坐标系在机器人运动开始是重合的。但是，随着时间的推移是不重合的，而出现的偏差就是里程计的累积误差。那map–&gt;odom的tf就是在一些校正传感器合作校正的package比如gmapping会给出一个位置估计（localization），这可以得到map–&gt;base_link的tf，所以估计位置和里程计位置的偏差也就是odom与map的坐标系偏差。所以，如果你的odom计算没有错误，那么map–&gt;odom的tf就是0.]]></content>
      <categories>
        <category>ros</category>
      </categories>
      <tags>
        <tag>ros</tag>
        <tag>transform</tag>
        <tag>links</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[笔记本(GT 750M)Ubuntu14.04安装[CUDA8.0][cuDDN5.1][Tensorflow]]]></title>
    <url>%2Fyangningbocn.github.io%2F2017%2F12%2F22%2F%E5%8E%9F-%E7%AC%94%E8%AE%B0%E6%9C%AC-GT-750M-Ubuntu14-04%E5%AE%89%E8%A3%85-CUDA8-0-cuDDN5-1-Tensorflow%2F</url>
    <content type="text"><![CDATA[原创，转载请注明出处笔记本型号：联想Y500 CPU : Intel® Core™ i7-3630QM CPU @ 2.40GHz × 8 内存：7.7 GiB 显卡：GeForce GT 750M/PCIe/SSE2 系统版本：ubuntu 14.04 LTS 64bit 我的安装流程如下所示。 1.准备 首先确保你的系统是ubuntu14.04,而且一切都是正常的，如果有问题就重装吧，长痛不如短痛。 需要准备以下几个安装包： (1)NVIDIA显卡驱动包 我用的是375版本的，我试了一下382，是通过图形界面的系统设置安装的，会进入循环登录，进不去桌面，所以学乖了，用命令行安装官网上下载好的NVIDIA-375驱动包。 (2)CUDA8.0驱动包 [CUDA下载地址](https://developer.nvidia.com/cuda-downloads) 进入到下载的网页之后，你可能找不到CUDA8.0,这时候你按着下面的步骤走就可以了 打开网页之后，点绿色的Release Notes,点右上角的蓝色的older,然后点绿色的CUDA Toolkit 8.0 GA2[Feb 2017]，然后选择适合你的选项，最后的Installer Type建议选择runfile[local] (3)cuDDN5.1安装包 [cuDDN下载地址](https://developer.nvidia.com/rdp/cudnn-download) 打开网页需要你注册一个NVIDIA developer的账号，登录之后，同意他们的声明就可以下载，下载cuDNN v5.1 (Jan 20, 2017), for CUDA 8.0就可以了。 2.安装 (1)安装NVIDIA显卡驱动 [安装NVIDIA驱动的博客](http://blog.csdn.net/cosmoshua/article/details/76644029) [安装NVIDIA驱动的博客](https://www.cnblogs.com/alexanderkun/p/6905512.html) 按Ctrl + Alt +F1切换到控制台，关闭图形环境 12345678910卸载原有NVIDIA驱动sudo apt-get remove --purge nvidia*sudo init 3sudo rm -r /tmp/.X* sudo service lightdm stopsudo sh 你的显卡驱动包.runsudo service lightdm start查看是否安装正确：cat /proc/driver/nvidia/version (2)安装CUDA8.0 12sudo chmod 777 cuda_8.0.44_linux.runsudo sh cuda_8.0.44_linux.run 然后根据提示就可以安装了，安装驱动的那一行可以不用安装了 之后加入配置 12345678910sudo vim /etc/profile 添加以下内容(cuda-8.0可能不对，我的是需要改为cuda)export CUDA_HOME=/usr/local/cuda-8.0 export PATH=$CUDA_HOME/bin:$PATH export LD_LIBRARY_PATH=$CUDA_HOME/lib64:$LD_LIBRARY_PATH使环境变量生效source /etc/profile测试：在新终端打开nvidia-smi (3)把GCC版本降到5.0以下，一般这里不用更改 (4)安装cuDDN5.1 首先解压cudnn-8.0-linux-x64-v5.1.tgz 1234sudo tar xvzf cudnn-8.0-linux-x64-v5.1.tgzsudo cp cuda/include/cudnn.h /usr/local/cuda-8.0/includesudo cp cuda/lib64/libcudnn* /usr/local/cuda-8.0/lib64sudo chmod a+r /usr/local/cuda-8.0/include/cudnn.h /usr/local/cuda-8.0/lib64/libcudnn* 中间根据自己的路径进行修改 (5)安装TensorFlow 我的python是3.4版本，所以下载对应的whl文件然后安装 `sudo pip3 install tensorflow_gpu-1.2.1-cp34-cp34m-linux_x86_64.whl` (6)检查是否安装好 1234import tensorflow as tfhello=tf.constant(&apos;Hello, TensorFlow&apos;)sess=tf.Session()print(sess.run(hello)) 可能出现的问题及解决方案： 以后补充 遇到这个问题 CUDA Device Query (Runtime API) version (CUDART static linking) cudaGetDeviceCount returned 30 -&gt; unknown error Result = FAIL 执行以下命令 sudo update-alternatives –config x86_64-linux-gnu_gl_conf 然后选 /usr/lib/x86_64-linux-gnu/mesa/ld.so.conf 这个教程也不错，从中参考了很多 版权声明：本文为博主原创文章，未经博主允许不得转载。 作者：ynb19930428发表于2017/12/22 10:39:02 原文链接 阅读：118评论：0查看评论]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>Tensorflow</tag>
        <tag>CUDA</tag>
        <tag>cuDDN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[rviz闪退的解决方案]]></title>
    <url>%2Fyangningbocn.github.io%2F2017%2F12%2F21%2F%E5%8E%9F-%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E6%9C%BA%E8%BD%BDPC%E7%9A%84rviz%E9%97%AA%E9%80%80%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%2F</url>
    <content type="text"><![CDATA[背景：项目用到自己做的机器人，在机器人上装上了一个miniPC，在上面装上了ros indigo版本，使用远程桌面连接miniPC，然后操作机器人进行建图实验。 问题：在打开rviz后闪退 原因：这是由于rviz在不接显示器的时候，是不能启动的 解决方法： 1.使用zeroconf，通过ssh连接miniPC，进行控制，在自己的电脑上打开rviz，就能订阅miniPC上的topic 2.先插上显示器，打开rviz后，然后拔掉VGA或者HDMI.(这个方法是别人告诉我的不知道可不可行)]]></content>
      <categories>
        <category>ros</category>
      </categories>
      <tags>
        <tag>ROS</tag>
        <tag>robot</tag>
        <tag>rviz</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[setting-user of sublime]]></title>
    <url>%2Fyangningbocn.github.io%2F2017%2F12%2F08%2F%E5%8E%9F-sublime%E7%9A%84setting-user%2F</url>
    <content type="text"><![CDATA[刚开始用sublime,因为感觉很好用，所以想折腾一下。 系统:ubuntu 14.04 sublime版本:3126 作为一个渣渣，遇到的问题如下： 注册的问题百度一搜一大堆，关键词为：sublime3126注册码，举个栗子：用力戳这里 配置文件不能修改的问题Perferences-setting打开之后，有两块左右各一，一开始很傻，一直在左边Default修改，发现怎么改也改不了，一度怀疑人生，后来才发现右边也有一个框，把你想要修改的部分复制到右边，然后再修改就好了，会优先加载user中的内容‘’’{“color_scheme”: “Packages/Color Scheme - Default/Monokai.tmTheme”,“font_face”: “Courier New”,“font_size”: 18,“ignored_packages”:[&quot;Vintage&quot; ],“line_padding_bottom”: 1,“line_padding_top”: 1,“match_brackets”: true,“theme”: “Default.sublime-theme”,“tranlate_tabs_to_spaces”: true,“wrap_width”: 100}‘’’ 我的是这样的，我喜欢Courier New的字体，你也可以试试，看起来很舒服。因为想要用python，所以把tab转换为space，这样省了很多事情。]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>sublime-text3</tag>
        <tag>setting</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SLAM with LS01C and hector]]></title>
    <url>%2Fyangningbocn.github.io%2F2017%2F12%2F04%2F%E5%8E%9F-%E6%89%8B%E6%8C%81%E9%95%AD%E7%A5%9ELS01C%E4%BD%BF%E7%94%A8hector-mapping%E6%96%B9%E6%B3%95%E8%BF%9B%E8%A1%8C%E5%BB%BA%E5%9B%BE%E5%AE%9E%E9%AA%8C%2F</url>
    <content type="text"><![CDATA[我的代码在ls01c可以拿去下载。 本博客只是个人学习记录使用，瞎写写，内容比较粗糙。 从镭神客服那里拿到驱动 对驱动进行阅读，并启动节点获取雷达数据实验在启动激光雷达的过程中可能遇到这样的问题：驱动没问题，launch文件也没问题，但是雷达不旋转，也得不到数据，这是因为激光雷达的端口ttyUSB0(也可能是别的名称，自己查一下吧)没有权限，需要在终端执行以下语句： cd /devsudo chmod 777 ttyUSB 下载hector源码并编译hector的github下载地址 启动launch文件就可以建图了 可能遇到的问题： 手持时，可能因为移动的太快或者转动太快导致地图混乱 当有物体靠近激光雷达或者雷达收到振动时，终端会出现SearchDir angle change too large 后记：建图混乱的原因致使因为这个雷达的性能不满足这个算法。我回头试试用cartographer和这个雷达试试能否建出好图。]]></content>
      <categories>
        <category>ros</category>
      </categories>
      <tags>
        <tag>ROS</tag>
        <tag>robot</tag>
        <tag>SLAM</tag>
        <tag>hector</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[转|matlab的计时函数tic toc cputime和etime]]></title>
    <url>%2Fyangningbocn.github.io%2F2017%2F11%2F09%2F%E8%BD%AC-matlab%E7%9A%84%E8%AE%A1%E6%97%B6%E5%87%BD%E6%95%B0tic-toc-cputime%E5%92%8Cetime%2F</url>
    <content type="text"><![CDATA[matlab里面的计时函数：Matlab7的计时函数主要有tic,toc,cputime和etime等，计时函数可以定量的计算完成制定程序所消耗的时间资源，因为可以作为比较程序优劣的一个重要标准。 a、tic和toc函数 这两个函数一般配合使用，tic表示计时的开始，toc表示计时的结束。 格式如： tic 任意表达式 toc t=toc b、cputime函数 cputime函数返回从调用该函数起所用的总的Cpu时间，单位以秒计算。 格式如： t=cputime; 任意表达式或者程序 e=cputime-t; c、etime函数 e=etime(t2,t1)命令返回向量t1和t2之间的时间段，t1和t2必须含有由clock函数返回的6个元素，即[Year Month Day Hour Minute Second]。 举例说明： x=rand(2048,1); t=clock; fift(x); etime(clock,t); ans= 14.53&lt;div&gt;作者：ynb19930428发表于2017/11/9 23:54:28[ 原文链接 ](http://blog.csdn.net/ynb19930428/article/details/78495475)&lt;/div&gt;&lt;div&gt; 阅读：53评论：0[查看评论 ](http://blog.csdn.net/ynb19930428/article/details/78495475#commentstarget =) &lt;/div&gt;]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>matlab</tag>
        <tag>tic</tag>
        <tag>toc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[转|代价地图的层级结构]]></title>
    <url>%2Fyangningbocn.github.io%2F2017%2F11%2F03%2F%E8%BD%AC-%E4%BB%A3%E4%BB%B7%E5%9C%B0%E5%9B%BE%E7%9A%84%E5%B1%82%E7%BA%A7%E7%BB%93%E6%9E%84%2F</url>
    <content type="text"><![CDATA[I. 简介 几十年来，导航算法越来越复杂了。他们可以处理大量的传感器数据，以高精度跟踪障碍物和自由空间的位置。结合正确的路径规划者，他们可以很好地在机器人周围导航机器人。然而，许多这些导航算法也遇到同样的问题：算法基于静态约束寻找有效的碰撞 - 自由路径。这种算法对于许多用例来说是很好的，或者在抽象中导航，如果所有这些都是从点A到点B，这是不够的。对于其他用例来说还不够。对于在人口稠密的动态环境中移动的机器人，需要将更复杂的约束集成到优化中。从一个点到另一个点只是一个更大的上下文的一部分。机器人围绕障碍物移动只是为了避免碰撞是不够的;机器人必须因为语义上的不同而对待这个障碍。例如，在大多数情况下驾驶几厘米远离桌子是完全正确的。然而，我们绝不希望紧密的贴着人驾驶。然而，在等价对待所有障碍的成本图中，路径规划者无法选择一条正确的路径。 这里写图片描述 II. 相关工作 除了尊重他人的个人空间之外，还有许多其他的场景，选择最短的无碰撞路径可能不是最理想的。考虑到人们通常的位置信息，避免可能的障碍的更长的路径可能是首选的。机器人还必须考虑进入潜在危险区域的效用，如厨房，这是有效的路径，但它们是有代价的。即使是一些简单的因素，比如在走廊的右侧驾驶，也需要考虑。机器人所需要的路径将取决于对更大背景的额外信息。 在传统的成本图中，所有的数据都存储在一个价值网格中，我们称之为一个单一的成本图。一旦价值被输入到这样一个成本图中，它的任何额外的信息被放弃，使得它不可能 告诉某个给定的致命障碍物是否来自传感器之一，静态地图或其他来源。 虽然可以在单片成本图中实现更复杂的成本图限制，但维护附加信息需要以特别的方式进行，并且对策略的调整将变得更加复杂。 在本文中，我们介绍我们的解决方案，将额外的语义信息归结为成本图，并采用了一种称为分层成本图的新方法。 使用ROS Navigation框架作为起点，我们展示了分层的costmaps复制了以前导航算法的功能，同时增加了处理更多上下文的灵活性。 我们将讨论算法和数据结构，以及改进以前的方法。 然后，我们将检查可以添加到旧的和新的成本图中的不同层，以及它们如何影响规划的不同路径。 这项工作的重点是用于路径规划的网格表示。 20世纪80年代，Moravec和其他人在CMU开发的占用电网是现代成本图的直接祖先[1,2]。 所含值的语义是直接的; 每个单元格的值是存在障碍物的概率，因此更新过程是贝叶斯规则的直接应用。 Konolige [3]和Thrun [4]改进了概率模型，以获得更好的定位障碍的结果。 基于网格的成本图方法（其中网格值不是概率，是成本）已被证明是有用的，特别是当障碍物的位置更容易固定（即不使用声纳）时。在过去，这些成本图主要集中在二进制成本图上，其中单元被占用或可用空间。现在，成本映射中增加了更复杂的成本，从而导致了成本映射中值的棘手语义。这些非致命成本与被占用和自由价值之间的值通常表示软约束。自主车辆使用这样的价值来优化在街道正确的一面驾驶和其他优惠驾驶行为[5]。 Gerkey和Agrawal [6]在成本图中以不同的成本代表了不同类型的地形及其遍历性。软约束也用于基于人机交互的约束。 Sisbot等人的Costmap系统[7]考虑到人们的个人空间和视野，Kirby等人[8]谁也模仿社会行为像传递右边。 Svenstrup等人开发了更复杂的人们感知导航的成本方法。 [9]和Scandolo和Fraichard [10]。 III. 整体导航的实现 A.实践状况 在本文中，我们专注于ROS [11]导航堆栈，因为它被广泛使用并运行在几十个机器人硬件上。 像许多其他系统一样，它产生最小长度的无碰撞路径。 其使用的costmaps是单片的，如前所述。 请注意，它在两个不同的参考帧中确实有两个costmap; 然而，由于它们包含大致相同的数据并用于两个不同的规划步骤，我们认为它们是单片的。 成本映射中的值来自三个位置之一。 首先，可以使用映射软件先验创建的静态成本映射来初始化成本图。 第二，传感器数据通过一组标记观察持续更新，其中已知障碍物（例如激光扫描的终点）以及一组清除观测值，用于传感器和障碍物之间的空间 众所周知没有障碍。 第三，ROS还在地图中使用配置空间优化，如果机器人的中心位于该特定位置，则所有致命的障碍物都被膨胀以划分机器人将处于碰撞的区域。 这避免了在路径规划的每个步骤中检查机器人的足迹的任何部分是否会发生碰撞。 ROS导航堆栈的一个附加功能是能够在三维方面推理其环境。 许多导航系统依赖于平面/二维障碍物数据，如由固定的激光测距仪提供的障碍物数据，如果物体的大部分不在激光高度，这可能是有问题的。 这可能导致机器人与桌面碰撞的情况，因为只检测到桌子的腿。 避免这个问题的一个方法是通过三个跟踪障碍物信息 维度使用Marder-Eppstein等人[12]中描述的体素网格数据结构。 体素网格可以使用三维传感器（如倾斜激光扫描仪或Microsoft Kinect）跟踪不同高度的障碍物。 将信息存储在三维中可以更智能地更新信息，然而三维信息随后被投影到二维网格中以进行规划 B.限制 在计算最小长度的无碰撞路径时，单片成本图已经被证明是有效的。然而，可实现功能的类型和成本地图的效率是有限制的。在整体成本地图上的局限性是，在代价图和它们的非结构化的更新方面缺乏信息. 1) 在更新步骤中有限的信息:单片成本地图的主要限制之一是，costmap中的大多数信息存储在一个位置。这可以包括来自诸如静态映射和每个传感器的障碍信息，以及非致命成本和任何计划优化。将所有已编译的成本数据存储到这个简单的数据结构中，就会丢失关于它来自何处以及每个值表示什么的语义信息。由于不同数据源的相互混合，使得更新成本图变得更加困难。一旦成为一个单一的成本图，价值缺乏上下文。 例如，传感器数据和静态映射引入的致命障碍之间没有区别。因此，当清除观测与致命障碍重叠时，就无法确定其来源。ROS实现假设，清除观察应该优先考虑，认为致命障碍是在静态成本图中移动或错误的一个障碍。这 策略可以在许多场景中运行，但也会导致问题。如果数据中存在噪声或定位不当，则静态墙会被错误地清除，从而导致机器人规划一条穿过墙壁的路径。实践经验显示，PR2机器人上的ROS导航系统已经证实了这种趋势，结果使机器人看起来相当不聪明，因为它常常试图通过开车到房间的一个角落，而没有门，试图离开房间。 这个例子也有问题，它是基于视觉的传感器读数的长期记忆，即玻璃墙。如果所有的传感器数据都保存在单片成本图中，那么就可以通过清除激光观测(包括玻璃障碍物)来清除标记的声纳障碍。因此，机器人可能会试图通过玻璃，这显然是次优的。 另一个例子，膨胀过程也使更新过程复杂化。 由于不断变化的地区，必须在每个周期重新计算更新障碍物附近每个费用图单元格的膨胀值。 由于成本映射没有任何方法来确定成本映射中的值的来源，所以ROS实现会清除更新数据区域中的所有非致命值，然后使用更新的位置重新计算它们。 这掩盖了引入非致死值的任何其他数据源，并强制在每个周期重新计算这些值。 第三个例子是遇到ROS实现的原始开发者，并涉及三维传感器。 如果数据仅存储在单片成本图中，则通过清除观察值可能会不适当地删除不同高度的障碍物。 因此，他们引入了体素网格来跟踪附加信息。 但是，此修复仅适用于一种类型的数据，并且不能扩展到所有其他类型的数据。 2)固定更新区域:在整体成本地图中缺乏语义信息，也很难判断成本价值在成本地图上有多长时间。因此，如果更新的区域需要后处理或发布到一些外部源，就没有确定的方法来确定最近更新的范围。处理这个问题的一个无效的方法是保守地估计覆盖整个区域的地图，这些区域可能已经更新，这就是ROS的实现所做的。在实践中，这意味着要在机器人周围更新大约600万x 600平方的空间，不管这个空间实际上更新了多少。 (3)临时更新过程:没有为如何添加不同的信息来源和组合来生成成本地图的设置范例。因此，即使语义问题已经被解决，信息源也会以特定的方式更新costmap。到目前为止，这种方法已经奏效，因为在实践中使用的数据源相对较少，但是随着源数量的增加，这种方法也变得不可行了。即使在以前的工作中，为计算成本定义了有用的算法，他们使用的过程实际上是不透明的。如果没有关于如何精确地更新成本地图的信息，复制结果就会变得更加困难。 4)不灵活的配置:除了限制成本地图所包含的信息量外，单片成本地图还限制了可以使用的信息类型。这个约束来自于原占用网格定义的costmap，其中每个值只表示单元格中的一个障碍的概率。类似地，在价格为成本的网格中，输入到costmap的信息输入的类型仅限于成本。因此，如何将概率网格与基于成本的网格结合起来是不明确的。ROS costmap实现有额外的问题，因为它所接受的唯一类型的信息是二进制的障碍数据，即存在明显的障碍或者绝对自由空间。添加非致命成本并不适合其整体框架。在costmap中有一个数据类型，信息是语义固定的。 IV. 分层代价图 A. 数据结构和更新算法 为了抵消前一节中介绍的限制，我们设计了分层成本地图。数据结构仍然包含用于路径规划的二维成本网格。关键的区别是如何填充这个主代价图的值。分层costmap不是直接在网格中存储数据，而是维护一个有序的层列表，每个层都跟踪与特定功能相关的数据。然后，将每个层的数据累积到主成本图中，它需要两个遍历层的有序列表。 在第一个传递中，updateBounds方法，每个层被轮询，以计算它需要更新多少成本地图。顺序遍历，依次为每个层提供前层需要更新的边界框(最初是一个空框)。该层可以根据需要扩展边框。第一个传递的结果是一个边界框，它决定了需要更新多少主成本图。在第二个传递过程中，调用updateValues方法，在此期间，每一个连续层将更新主costmap的边框区域内的值。图2使用一组复制基本单块成本图的行为的层来说明更新算法。 有些层将维护自己的全尺寸版本的costmap缓存结果。这是数据结构维护关于数据的语义信息的主要方式之一。例如，一个障碍层保存了一个私有的costmap副本，用于存储之前所有的射线跟踪和标记步骤的结果，而不是每次都重新计算它们。但是，由于这些成本都保存在私有成本映射中，因此，这一层不可能意外地覆盖不必要的数据。 其他层不需要将大量数据从循环中保存到循环，并且将在每个回合中更新主成本图，或者简单地操作其他层已经写入了master costmap的数据。 图2中的示例展示了以前用于生成costmap的特定方法可以被细化为一个整洁的、定义良好的过程。在边界更新步骤中，静态映射通常不需要更新边界框，因为根据定义，什么都没有改变。它只会在收到地图后立即更新边界框，以便将整个地图加载到主成本图中。障碍层将在updateBounds传递过程中处理所有新的传感器数据，以确定其空间范围，并相应地更新边界框。这意味着updateValues传递将花费更少的时间在障碍层，因为它只需要将存储在层网格中的值与主网格中已经存在的值进行比较。在默认配置中，障碍层将选择两个值的最大值。 这里写图片描述 更新算法——在(a)中，分层的成本图有三层和主成本图。障碍和静态层保留了它们自己的网格副本，而膨胀层则没有。为了更新costmap，算法首先调用每个层上的update界限方法(b)，从列表的第一层开始，显示在底部。为了确定新的边界，障碍层用新的传感器数据更新自己的成本地图。结果是一个包含每个层需要更新的所有区域的边界框。接下来，每一层依次使用updateValues方法更新边界框中的master costmap，从静态层(c)开始，然后是障碍层(d)和膨胀层(e) B. 优点 分层成本地图方法明确地解决了单片成本地图的局限性。 1)更清晰的更新步骤:将不同类型的成本图信息添加到分层的costmap方法中，使更新步骤更加容易。如果想要的行为包括治疗静态障碍、感知激光障碍和感知声纳障碍的能力，将这些障碍存储在自己的图层中，可以大大简化簿写操作。每个层只需要保持与相同类型的其他信息相一致的信息，而不是先前的方法。 1 2 ​ 分层代价图也消除了竞争代价图信息源之间的争用。考虑一下有一个软约束层来编码代理信息和膨胀层。在单岩性的实现中，这两种类型的信息都将存储在奇异的代价图中。当需要重新计算通胀值时，所有非致命值都需要清除，包括来自代理约束的值。如果代理信息更新的频率低于整个成本图，单片成本图需要从每个周期的代理层重新计算值。使用分层的成本图，代理层不需要在每次通货膨胀的时候清除和重新计算。相反，它只会将其值复制到主成本图，这是一个非常快的过程。 ​ 这种更清晰的关注点分离也使得成本图的个人组成部分更容易调整。初始用户可以一次引入一层，然后依次调试。 ​ 2)动态更新区域:相对于固定的或不知道的区域，在单片成本地图上的每一轮更新中更新的区域，通过层间的updateBounds，分层代价图只更新了单个层认为需要的映射区域。这给了costmap额外的稳定性，确保只更新了边框内的值。此外，通过更新更小的地图，它可能更有效。 ​ 3)有序更新过程:与单片成本图中元素的随机顺序相反，分层成本映射有显式排序。在我们的例子中，很明显，膨胀层将会从障碍和静态层中增值，这是由于膨胀层将在有序列表中的其他两个因素之后出现的。此外，层之间的交互是显式指定的。每个costmap可以配置为将前一个值和层的值合并为最大值、最小值或两者的其他数学函数。 ​ 4)灵活配置:最后，也是最重要的，分层成本地图方法的能力实际上是无限的。要实现与之前的实现等效的行为集所需的层仅仅是开始。机器人操作者的许多层都可以添加到分层的成本图中。结果是，单个层可以实现任意复杂的逻辑来更新成本图，扩展成本图语义的可能性。正如我们在以后的个人层面讨论中所看到的，costmap可以包括概率层和非致命层，以及二进制障碍数据。 V. 对比 A.实现细节 ​ 虽然分层成本映射的算法和数据结构是系统无关的，但由于平台的普遍存在，我们将重点放在实现系统与ROS导航堆栈一起工作，以演示方法的能力。分层的costmap实现使得costmap 2d API大部分都是在触觉中，和其他的导航代码一样，是在c++中实现的，每个层都是这样。 ​ 实现一个层很容易。首先，必须创建一个扩展costmap 2d::层类的新类。这意味着实现初始化函数(该层可以独立地订阅ROS生态系统中的任何数据源)、updateBounds函数(更新上面描述的边界框)和updateCosts函数(将值写入到master costmap)。独立编译的层可以通过简单的运行时参数变化插入分层的成本图。 ​ 为了复制所有的功能，只有四种类型的层是需要的。之前，costmap类有特殊的情况来处理是否存在静态映射，或者是否在三维空间中跟踪这些障碍，分层的costmap被配置为不同的层。如图2所示，全球成本图被复制到一个静态的地图层，一个障碍层和一个通货膨胀层。通过更改单个参数，可以将障碍层转换为voxel层。本地成本图更简单，只是需要一个障碍或voxel层和一个通货膨胀层。 ​ 然后，在Gazebo场景中，通过重复的模拟试验，运行了两个代价映射的实现。使用的机器人是PR2，如在ROS导航的初始基准测试中使用的.Marder-Eppstein等人[12]。经过数百次模拟，我们发现，在路径长度、完成时间和与障碍物的关系方面，两种不同的方法产生的路径之间没有明显的差异。 B.时间对比 ​ 我们分析的最重要的统计数据之一是costmap更新周期的平均运行时。由于本地计划需要运行和适应新的障碍的速度，更新过程必须非常快。我们要达到的标准(如之前的实现所使用的标准)是至少5赫兹的更新频率，以0.2秒的时间限制单个的循环运行时。根据环境的具体情况和运行costmap的系统，单片成本地图的数量可以超过这个数字的两倍。分层的costmap实现也依赖于这些变量。最终，分层的实现在某些场景中运行得更快，在一些角落的情况下会更慢。 ​ 在我们的模拟中，全局代价图的平均更新时间分别为0.00166和0.00236，而对于本地代价图，更新时间分别为0.00493和0.00463。使用单边t测试，我们发现在平均本地更新时间上没有显著的差异。全球更新时间与分层成本地图(p&lt; 0.001)显著地慢。但是，我们确定这是一个稀疏模拟环境的结果。在这些模拟中，机器人被放置在一个完全开放的环境中，除了一个单独的、相对较小的机器人和它的目标之间的障碍物。因此，机器人的激光读数在大多数方向上延伸至最大距离，从而产生一个分层的实现需要更新的大范围。这个区域需要被每一层更新，从而减慢整个更新速度 ​ 我们还在更混乱的环境中模拟了机器人，机器人在各个地方被墙壁环绕。由于墙壁非常接近机器人，更新区域要小得多。如图3所示，在这个场景中，分层成本图更快。随着更新区域的增长，整体实现的更新时间基本保持不变，而分层的costmap的更新时间会增加，以匹配更新的单元格数量。考虑到costmap系统是为在混乱的快速变化的环境中工作而设计的，在这些环境中分层的costmap的速度更有意义。 C. 在真实世界中导航 ​ 除了完整的模拟测试之外，我们还在实际环境中测试了PR2平台上的分层成本图。这些测试主要是在车库的办公室环境中进行的。通过使用这些层来模拟整体的costmap结构，PR2能够成功地复制以前实现的所有路径规划行为。然而，当我们修改层来获取不可能的单片成本映射时，会出现更令人兴奋的结果。 ​ 首先，通过分离静态和障碍层，我们可以控制障碍层是否有能力覆盖静态映射。如第二节所述。一个整体的costmap导航可以不正确地清除静态映射的部分，导致机器人规划一条穿过坚实墙的路径。通过只允许障碍物层到射线追踪和清除感知障碍(而不是静态地图上的障碍物)，这堵墙从来没有从主成本图中清除，消除了令人尴尬的穿墙行为。 ​ 新层的引入也带来了新的不可能的行为。在我们对costmap的调查背后的动机用例是创建社会化感知的机器人导航，类似于相关工作部分引用的工作。我们成功地在PR2的路径规划中加入了这样一层。我们创建的新层和其他层的详细信息在下面的部分中详细阐述。 VI. 层 ​ 除了允许分层costmap复制其他costmap的功能之外，它的主要优点是能够轻松地集成额外的层，这些层将以同样的方式处理，就像costmap的其他元素一样。这些附加层赋予了代价映射的能力，可以从许多不同的上下文中表示信息，并生成对这些上下文进行适当反应的运动。 A. 标准层 ​ Static Map Layer:为了做全局规划，机器人需要一个超越其传感器的地图，以了解墙壁和其他静态障碍物的位置。 静态地图可以先用SLAM算法生成，也可以从架构图中创建。 当层接收到地图时，updateBounds方法将需要返回覆盖整个地图的边界框。 然而，在随后的迭代中，由于它是静态的，所以绑定框的大小不会增加。 在实践中，静态地图一直是全局代价图的底层，因此它将其值直接复制到主成本图中，因为在其之前没有其他层将被写入主节点。 （如果机器人在使用生成的地图导航时运行SLAM，则分层成本图方法允许静态地图层更新，而不会丢失其他层的所有先前信息。） ​ Obstacles Layer:该层从诸如激光和RGB-D相机的高精度传感器收集数据，并将其放置在二维网格中。 传感器和传感器之间的空间被标记为自由空间，传感器读数的位置被标记为占用。 每个周期，边界框扩展以适应所有新数据。 根据传感器数据与静态映射所需的信任级别，该层可以配置为覆盖主成本映射中的值。 或者，该层只能写入致命的障碍，并将未知区域更新为自由空间。 ​ Voxels Layer:这一层具有与障碍层相同的功能，但在三维空间中跟踪传感器数据。在[12]中引入的三维像素网格允许更智能地清除障碍物，以反映可以看到的多个高度。 ​ Inflation Layer:如前所述，膨胀过程在每个致命障碍周围插入缓冲区。增加到costmap的值取决于离最近的障碍的距离。机器人肯定会发生碰撞的地点有致命的代价，而且周围的区域有一些小的非致命的成本。这些值确保机器人不会撞上致命的障碍物，也不愿太靠近。更新边界的步骤将增加前一个边界框，以确保新的致命障碍将被夸大，并且在前一个跳跃框外的致命障碍也会膨胀到跳跃的盒子中。updateValues步骤直接操作在master costmap上，而不存储本地副本。 B. 新功能 Sonar Layer:单片成本地图能够处理声纳数据，但是分层成本地图增加了如何处理它的选项。将一层用于声纳读数可以避免玻璃墙被激光观测排除的问题。此外，我们还可以使用这一层来处理不同于高准确度障碍层的声纳数据。我们建造的声纳层实现了一个概率声纳模型，并使用贝叶斯逻辑更新成本图。然后我们就可以设定一个截止概率，我们只写一些我们相对确定的数据，在master costmap中。请注意，这种方法允许我们保持概率的语义含义，而不必直接将它们与成本结合起来 Caution Zones Layer:这个层让我们能够以比空闲/占用更详细的方式指定机器人环境的区域。尽管没有障碍，但大多数机器人都希望避免导航到楼梯导向。或者机器人不应该导航到特定的人的办公室。有许多场景，运营商将要限制机器人可以安全驾驶的地方，尽管出现导航。在实践中看到的这些限制的一种技术是在静态地图上标记障碍物。这种技术可以起作用，但可以从其他应用程序（如AMCL）可能需要的地图中删除信息。这一层还使我们能够标记不一定被禁止的区域，但不是可取的。向厨房增加非致命成本可以确保机器人不会靠近危险液体驱动，除非没有其他选择。这些区域也可用于社会上不太可接受的领域，例如人与物体之间的空间，如电视机，如Ferguson和Likhachev所示 Claustrophobic Layer:通胀层在致命障碍周围增加了一个小缓冲区，但幽闭恐怖层增加了更大的缓冲区，以增加接近障碍物的相对成本。这一层对于那些关于机器人相对于障碍物的确切位置有更多不确定性的场景来说是很有用的，而在障碍物中驾驶的几率或成本也很高。 C. 人机交互层 正如在相关的工作部分中所看到的，将更复杂的成本添加到costmap的主要动机之一是为了建模由人机交互引入的约束。 ​ Proxemic Layer:研究人员和机器人之间空间关系的研究稳步上升，以及确保机器人不违反预期关系的方法。最常见的方法是增加高斯分布，或者是多重高斯分布的混合物，到costmap，如Kirby，[8]。这些调整创造了周围的区域，使路径更接近人们更昂贵的路径，尊重他们的代理关注点。 ​ 我们创建了一个代理层，它实现了Kirby混合的高斯模型。利用检测到的人的位置和速度(从人的腿的激光扫描中提取出来)，该层将每个人的高斯值写入到图层的私有成本地图中，然后添加到master costmap中。根据两个不同的参数(振幅和方差)来度量生成的值。一般来说，当你增加这些参数时，最优路径会离你的人更远。然而，正如在[13]中所讨论的那样，在最优路径更改为最短路径之前，这些参数可以发生多大的改变是有限度的。这意味着调整参数，试图让机器人更远的离开，相反的情况发生，这在社会上是次优的。[13]的结果是复制的 ​ 我们也开始实施相关工作中提到的更复杂的代理模型。一些模型比一个人的位置和方向更多地假设信息，我们的层实现假设它们与足够强大的传感器能力结合在一起来探测像头部和身体姿势这样的东西。 ​ Hallway Layer:在一些文化中，人们习惯走在正确的道路上，就像许多国家的司机在马路的右边一样。我们实现了一个层，它决定了机器人是否在走廊里，动态地增加了走廊左边的成本，让机器人更喜欢右边。我们在最近的一项用户研究中使用了一个类似的模型，在这里，层改变了成本，让机器人更喜欢在走廊的另一边进行导航，这是最接近的人(通常是右侧)。这一层的添加不仅能有效地将机器人移到走廊的一边，还能使人在互动过程中更有效 ​ Wagon Ruts Layer: 如果机器人的目标是避免在社会上受到侵害，并尽量减少意想不到的障碍，一个有效的策略可能包括模仿人类的交通模式。这一层可以降低人们走过的路的成本，从而产生机器人的最佳路径。你也可以逆转成本的极性，并在人们通常是为了减少社会混乱的地区增加价值。 VII. 讨论 ​ 在本文中，我们讨论了新的分层成本映射模型对上一个单片模型的好处。由于它的效率和可扩展性，它的实现被作为最新版本的ROS的默认导航算法，它的源代码可以在http://github.com/ros-planning/navigation中找到。附加层的所有代码都可以从http://wiki.ros.org/costmap_2d找到链接。此外，基于基于插件的层结构，我们希望在创建额外的costmap规则的新开发将被实现为层，并在ROS导航框架内进行测试，从而允许更开放地交换算法行为和更容易访问的比较。 ​ 分层的costmap和相关的层打开了更多的机器人行为的可能性。随着更多的层被融入到规划算法中，机器人将会更加了解它们的环境的不同方面，并且在导航时考虑这些上下文。当前的实践状态是忽略额外的上下文，或者一次解决它们。虽然分层的costmap可以使上下文集成，但我们预测未来的挑战将是找到一种方法来动态管理层的集合，以确保正确的上下文优先于正确的时间。代理行为决定了个人空间应该受到尊重，但确切地说，机器人的路径应该是多么的低效，这是一个悬而未决的问题。有一半的问题是设计成本图层，这样数学上最优的路径是期望的距离。另一半是一个社会问题，答案不明确，如何平衡机器人的需求和人们的需求。虽然我们无法给出具体的答案，但我们相信，拥有一个高度自定义的数据结构来定制机器人的行为将使回答这个问题变得更加容易。 转载自：http://blog.csdn.net/xmy306538517/article/details/72899667 作者：ynb19930428发表于2017/11/3 15:08:04 原文链接 阅读：71评论：0查看评论]]></content>
      <categories>
        <category>ros</category>
      </categories>
      <tags>
        <tag>ros</tag>
        <tag>navigation</tag>
        <tag>layers</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于瑞典轮机器人——youbot的讨论]]></title>
    <url>%2Fyangningbocn.github.io%2F2017%2F10%2F17%2F%E5%8E%9F-%E5%85%B3%E4%BA%8E%E7%91%9E%E5%85%B8%E8%BD%AE%E6%9C%BA%E5%99%A8%E4%BA%BA%E2%80%94%E2%80%94youbot%E7%9A%84%E8%AE%A8%E8%AE%BA%2F</url>
    <content type="text"><![CDATA[一个老外给出了一个观点：把他当做平面移动处理，比较贴合我的想法，整体的运动与轮无关，这样复杂的问题简单化。 他的原话： Just a thought, for this robot it may be easier to model the motion of the entire robot instead of modeling the individual wheel. One path could be to use a plugin that accepts twist messages and applies them to the robot base. An example of this is the Planar Move Plugin. In two dimension (i.e. stage) this might have been called the holonomic plugin. 网址为： How to simulate a mecanum wheel in Gazebo 也有人提出这样的观点：通过添加一个转动关节轴进行角度改变来模拟瑞典轮 原话如下： new to all this but thought I could simulate a mecanum wheel by adding a rotational joint about z-axis for each wheel that is restricted to 0, 45 and 90 degrees. this way the base can go forward/backward/45 degree forward/backward and left/right, sideway left/right and rotate left/right. the simulated moves would need to translate into rotational direction sets for the physical movements of the 4 wheel motors? however - how can I have a restricted set of angels for a joint and what needs to be in place to translate it into the physical wheel rotation command? of course the simulation would only provide a logical wheel view and it will also need a special collision handling as the wheels do not really rotate on the z-axis. but in total an easy representation of the possible moves? 网址如下： Mecanum wheels ok in one direction not the other in Gazebo 还有一个人提出消除掉轮与地面之间的摩擦，然后按照twist来结算每个轮的速度，只是让轮旋转，机器人的移动依赖于twist。而不依赖于每个轮的旋转。我觉得这个思路很好。 原话： It’s a really interesting simulation issue. First of all, let’s a look at the wheels. They are not standard wheels, they are mecanum wheels. This kind of wheels help the robot to move and rotate easily in any directions, even in congested area. The movement come from the resulting rotation speeds of the wheels, which are independent. I have found I nice explanation of the relationship between the wheels rotation and the resulting movement on this lego page. On the videos, the youBot looks like gliding on the ground. From a design point of view, this is convenient, because it is similar to a planar joint + a revolute joint between the base and the ground. Very easy to control. From a simulation point of view, it is a nightmare. I doubt that the repo from youBot or WPI-RAIL did the job, because they involve casters. And there is no casters on the real KUKA youBot. If you have a look at their teleop program, you will see that this program align the wheels before the rotation, which is not the design of a mecanum wheel at all. With the mesh of the wheels, you will see it. This not natural (this is also why the wheels solid shape is a sphere). And even worst, the the rotation is therefore not supported. So for me, this model is really poor. I raised the question on Gazebo answers. Someone suggested to use this planar controller. I considered it as a second choice, but finally, this is very close to the behavior of the real mecanum wheels, as you define the x/y velocity and rotation, which can be directly linked to the wheel individual speeds. I have remove the friction between the wheels and the ground. On the real robot, this x/y speed and rotation translation to individual wheels speeds would also be very convenient. A visually better solution would be to add the mesh of the wheels, and rotate them according to the planar messages. No time to work on this. Finally, if you are looking for a very physical solution, I have found this link, where it has been done in another simulator, by mixing kinematics and dynamics solutions. That would be really great to have more realistic solution. For my requirement, the planar controller is enough. 网址： Move the youbot using its wheels]]></content>
      <categories>
        <category>ros</category>
      </categories>
      <tags>
        <tag>ROS</tag>
        <tag>横向移动</tag>
        <tag>机器人</tag>
        <tag>youbot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[gazebo中机器人横向移动]]></title>
    <url>%2Fyangningbocn.github.io%2F2017%2F10%2F09%2F%E5%8E%9F-%E5%9C%A8gazebo%E4%B8%AD%E5%90%AF%E5%8A%A8%E7%A7%BB%E5%8A%A8%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%A8%A1%E5%9E%8B%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8%2F</url>
    <content type="text"><![CDATA[本博客只是个人学习记录使用，瞎写写，内容比较粗糙。编写过程中，借鉴了yaked大神的实战youBot和ROS-WIKI以及其它一些大神的内容。 现在大部分的移动机器人主要差动轮进行运动，只有linear.x和angular.z两个值，但是我的模型是４个瑞典轮，能提供横向的移动速度，即linear.y。 在gazebo中的横向移动同样要修改控制方式，只不过在与rviz不同，不能直接修改，文件格式打不开，这里采用的方案是直接在xacro中加载一个平面移动的插件就可以了 &lt;!-- position controller --&gt; &lt;gazebo&gt; &lt;plugin name=&quot;base_controller&quot; filename=&quot;libgazebo_ros_planar_move.so&quot;&gt; &lt;commandTopic&gt;cmd_vel&lt;/commandTopic&gt; &lt;odometryTopic&gt;odom&lt;/odometryTopic&gt; &lt;odometryFrame&gt;/odom&lt;/odometryFrame&gt; &lt;odometryRate&gt;100.0&lt;/odometryRate&gt; &lt;robotBaseFrame&gt;base_footprint&lt;/robotBaseFrame&gt; &lt;broadcastTF&gt;true&lt;/broadcastTF&gt; &lt;/plugin&gt; &lt;/gazebo&gt; 模型xacro加载到gazebo沿用yaked大神博客中的gazebo.launch进行修改，把自己的模型修改到他的launch文件中，就可以了。＇ gazebo加入上面的代码]]></content>
      <categories>
        <category>ros</category>
      </categories>
      <tags>
        <tag>ROS</tag>
        <tag>横向移动</tag>
        <tag>机器人</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在RVIZ中启动移动机器人模型，并实现横向移动]]></title>
    <url>%2Fyangningbocn.github.io%2F2017%2F10%2F09%2F%E5%8E%9F-%E5%9C%A8RVIZ%E4%B8%AD%E5%90%AF%E5%8A%A8%E7%A7%BB%E5%8A%A8%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%A8%A1%E5%9E%8B%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8%2F</url>
    <content type="text"><![CDATA[本博客只是个人学习记录使用，瞎写写，内容比较粗糙。编写过程中，借鉴了古月居大神的smartcar和ROS-WIKI以及其它一些大神的内容。 引入古月居大神的链接使用smartcar进行仿真和smartcar源码上传 下面我针对自己的机器人编写的代码和文件。launch文件 12345678910111213141516171819202122232425262728293031323334353637383940&lt;launch&gt; &lt;param name=&quot;/use_sim_time&quot; value=&quot;false&quot; /&gt; &lt;!-- Load the URDF/Xacro model of our robot --&gt; &lt;arg name=&quot;urdf_file&quot; default=&quot;$(find xacro)/xacro.py &apos;$(find smartcar_description)/urdf/smartcar.urdf.xacro&apos;&quot; /&gt; &lt;arg name=&quot;gui&quot; default=&quot;true&quot; /&gt; &lt;param name=&quot;robot_description&quot; command=&quot;$(arg urdf_file)&quot; /&gt; &lt;param name=&quot;use_gui&quot; value=&quot;$(arg gui)&quot;/&gt; &lt;node name=&quot;arbotix&quot; pkg=&quot;arbotix_python&quot; type=&quot;arbotix_driver&quot; output=&quot;screen&quot;&gt; &lt;rosparam file=&quot;$(find smartcar_description)/config/smartcar_arbotix.yaml&quot; command=&quot;load&quot; /&gt; &lt;param name=&quot;sim&quot; value=&quot;true&quot;/&gt; &lt;/node&gt; &lt;node name=&quot;joint_state_publisher&quot; pkg=&quot;joint_state_publisher&quot; type=&quot;joint_state_publisher&quot; &gt; &lt;/node&gt; &lt;node name=&quot;robot_state_publisher&quot; pkg=&quot;robot_state_publisher&quot; type=&quot;state_publisher&quot;&gt; &lt;param name=&quot;publish_frequency&quot; type=&quot;double&quot; value=&quot;20.0&quot; /&gt; &lt;/node&gt; &lt;!-- We need a static transforms for the wheels --&gt; &lt;node pkg=&quot;tf&quot; type=&quot;static_transform_publisher&quot; name=&quot;odom_left_wheel_broadcaster&quot; args=&quot;0 0 0 0 0 0 /base_link /left_front_link 100&quot; /&gt; &lt;node pkg=&quot;tf&quot; type=&quot;static_transform_publisher&quot; name=&quot;odom_right_wheel_broadcaster&quot; args=&quot;0 0 0 0 0 0 /base_link /right_front_link 100&quot; /&gt; &lt;node name=&quot;rviz&quot; pkg=&quot;rviz&quot; type=&quot;rviz&quot; args=&quot;-d $(find smartcar_description)/urdf.rviz&quot; /&gt; &lt;/launch&gt; xacro文件包括三部分： smartcar_bodylt;?xml version=&quot;1.0&quot;?&gt; &lt;robot name=&quot;smartcar&quot; xmlns:xacro=&quot;http://ros.org/wiki/xacro&quot;&gt; &lt;xacro:property name=&quot;M_PI&quot; value=&quot;3.14159&quot;/&gt; &lt;!-- Macro for SmartCar body. Including Gazebo extensions, but does not include Kinect --&gt; &lt;xacro:include filename=&quot;$(find smartcar_description)/urdf/gazebo.urdf.xacro&quot;/&gt; &lt;xacro:property name=&quot;base_x&quot; value=&quot;0.33&quot; /&gt; &lt;xacro:property name=&quot;base_y&quot; value=&quot;0.33&quot; /&gt; &lt;xacro:macro name=&quot;smartcar_body&quot;&gt; &lt;link name=&quot;base_footprint&quot;&gt; &lt;inertial&gt; &lt;mass value=&quot;0.0001&quot; /&gt; &lt;origin xyz=&quot;0 0 0&quot; /&gt; &lt;inertia ixx=&quot;0.0001&quot; ixy=&quot;0.0&quot; ixz=&quot;0.0&quot; iyy=&quot;0.0001&quot; iyz=&quot;0.0&quot; izz=&quot;0.0001&quot; /&gt; &lt;/inertial&gt; &lt;visual&gt; &lt;origin xyz=&quot;0 0 0&quot; rpy=&quot;0 0 0&quot; /&gt; &lt;geometry&gt; &lt;box size=&quot;0.001 0.001 0.001&quot; /&gt; &lt;/geometry&gt; &lt;/visual&gt; &lt;/link&gt; &lt;joint name=&quot;base_footprint_joint&quot; type=&quot;fixed&quot;&gt; &lt;origin xyz=&quot;0 0 0&quot; rpy=&quot;0 0 0&quot; /&gt; &lt;parent link=&quot;base_footprint&quot;/&gt; &lt;child link=&quot;base_link&quot; /&gt; &lt;/joint&gt; &lt;link name=&quot;base_link&quot;&gt; &lt;inertial&gt; &lt;origin xyz=&quot;0.0032273 -0.060593 1.3595E-05&quot; rpy=&quot;0 0 0&quot; /&gt; &lt;mass value=&quot;4.2623&quot; /&gt; &lt;inertia ixx=&quot;0.04568&quot; ixy=&quot;-0.00094545&quot; ixz=&quot;-8.9814E-06&quot; iyy=&quot;0.11402&quot; iyz=&quot;5.3399E-06&quot; izz=&quot;0.11035&quot; /&gt; &lt;/inertial&gt; &lt;visual&gt; &lt;origin xyz=&quot;0 0 0.23&quot; rpy=&quot;0 0 0&quot; /&gt; &lt;geometry&gt; &lt;mesh filename=&quot;package://smartcar_description/meshes/base_link.STL&quot; /&gt; &lt;/geometry&gt; &lt;material name=&quot;&quot;&gt; &lt;color rgba=&quot;1 1 1 1&quot; /&gt; &lt;/material&gt; &lt;/visual&gt; &lt;collision&gt; &lt;origin xyz=&quot;0 0 0.23&quot; rpy=&quot;0 0 0&quot; /&gt; &lt;geometry&gt; &lt;mesh filename=&quot;package://smartcar_description/meshes/base_link.STL&quot; /&gt; &lt;/geometry&gt; &lt;/collision&gt; &lt;/link&gt; &lt;link name=&quot;left_front_wheel&quot;&gt; &lt;inertial&gt; &lt;origin xyz=&quot;0 -1.98217916108356E-05 0&quot; rpy=&quot;0 0 0&quot; /&gt; &lt;mass value=&quot;0.176438810476987&quot; /&gt; &lt;inertia ixx=&quot;8.8965933887671E-05&quot; ixy=&quot;-1.27636183461175E-23&quot; ixz=&quot;8.0831821149659E-23&quot; iyy=&quot;8.89898462049031E-05&quot; iyz=&quot;2.16519665002917E-23&quot; izz=&quot;0.000130905430632044&quot; /&gt; &lt;/inertial&gt; &lt;visual&gt; &lt;origin xyz=&quot;0 0 0&quot; rpy=&quot;0 0 0&quot; /&gt; &lt;geometry&gt; &lt;mesh filename=&quot;package://smartcar_description/meshes/left_front_wheel.STL&quot; /&gt; &lt;/geometry&gt; &lt;material name=&quot;&quot;&gt; &lt;color rgba=&quot;1 1 0 1&quot; /&gt; &lt;/material&gt; &lt;/visual&gt; &lt;collision&gt; &lt;origin xyz=&quot;0 0 0&quot; rpy=&quot;0 0 0&quot; /&gt; &lt;geometry&gt; &lt;mesh filename=&quot;package://smartcar_description/meshes/left_front_wheel.STL&quot; /&gt; &lt;/geometry&gt; &lt;/collision&gt; &lt;/link&gt; &lt;joint name=&quot;left_front_wheel_joint&quot; type=&quot;continuous&quot;&gt; &lt;origin xyz=&quot;0.12875 0.1504 0.04&quot; rpy=&quot;1.5708 0 0&quot; /&gt; &lt;parent link=&quot;base_link&quot; /&gt; &lt;child link=&quot;left_front_wheel&quot; /&gt; &lt;axis xyz=&quot;0 0 1&quot; /&gt; &lt;/joint&gt; &lt;link name=&quot;right_front_wheel&quot;&gt; &lt;inertial&gt; &lt;origin xyz=&quot;0 -1.98217916108079E-05 0&quot; rpy=&quot;0 0 0&quot; /&gt; &lt;mass value=&quot;0.176438810476987&quot; /&gt; &lt;inertia ixx=&quot;8.8965933887671E-05&quot; ixy=&quot;-1.27636183461175E-23&quot; ixz=&quot;8.08318211496588E-23&quot; iyy=&quot;8.89898462049032E-05&quot; iyz=&quot;2.18596653030412E-23&quot; izz=&quot;0.000130905430632044&quot; /&gt; &lt;/inertial&gt; &lt;visual&gt; &lt;origin xyz=&quot;0 0 0&quot; rpy=&quot;0 0 0&quot; /&gt; &lt;geometry&gt; &lt;mesh filename=&quot;package://smartcar_description/meshes/right_front_wheel.STL&quot; /&gt; &lt;/geometry&gt; &lt;material name=&quot;&quot;&gt; &lt;color rgba=&quot;1 1 0 1&quot; /&gt; &lt;/material&gt; &lt;/visual&gt; &lt;collision&gt; &lt;origin xyz=&quot;0 0 0&quot; rpy=&quot;0 0 0&quot; /&gt; &lt;geometry&gt; &lt;mesh filename=&quot;package://smartcar_description/meshes/right_front_wheel.STL&quot; /&gt; &lt;/geometry&gt; &lt;/collision&gt; &lt;/link&gt; &lt;joint name=&quot;right_front_wheel_joint&quot; type=&quot;continuous&quot;&gt; &lt;origin xyz=&quot;0.12875 -0.1504 0.04&quot; rpy=&quot;1.5708 0 0&quot; /&gt; &lt;parent link=&quot;base_link&quot; /&gt; &lt;child link=&quot;right_front_wheel&quot; /&gt; &lt;axis xyz=&quot;0 0 1&quot; /&gt; &lt;/joint&gt; &lt;link name=&quot;left_back_wheel&quot;&gt; &lt;inertial&gt; &lt;origin xyz=&quot;0 -1.98217916108356E-05 0&quot; rpy=&quot;0 0 0&quot; /&gt; &lt;mass value=&quot;0.176438810476987&quot; /&gt; &lt;inertia ixx=&quot;8.8965933887671E-05&quot; ixy=&quot;-1.27300145019925E-23&quot; ixz=&quot;8.0831821149659E-23&quot; iyy=&quot;8.89898462049032E-05&quot; iyz=&quot;2.16519665002917E-23&quot; izz=&quot;0.000130905430632044&quot; /&gt; &lt;/inertial&gt; &lt;visual&gt; &lt;origin xyz=&quot;0 0 0&quot; rpy=&quot;0 0 0&quot; /&gt; &lt;geometry&gt; &lt;mesh filename=&quot;package://smartcar_description/meshes/left_back_wheel.STL&quot; /&gt; &lt;/geometry&gt; &lt;material name=&quot;&quot;&gt; &lt;color rgba=&quot;1 1 0 1&quot; /&gt; &lt;/material&gt; &lt;/visual&gt; &lt;collision&gt; &lt;origin xyz=&quot;0 0 0&quot; rpy=&quot;0 0 0&quot; /&gt; &lt;geometry&gt; &lt;mesh filename=&quot;package://smartcar_description/meshes/left_back_wheel.STL&quot; /&gt; &lt;/geometry&gt; &lt;/collision&gt; &lt;/link&gt; &lt;joint name=&quot;left_back_wheel_joint&quot; type=&quot;continuous&quot;&gt; &lt;origin xyz=&quot;-0.12875 0.1504 0.04&quot; rpy=&quot;1.5708 0 0&quot; /&gt; &lt;parent link=&quot;base_link&quot; /&gt; &lt;child link=&quot;left_back_wheel&quot; /&gt; &lt;axis xyz=&quot;0 0 1&quot; /&gt; &lt;/joint&gt; &lt;link name=&quot;right_back_wheel&quot;&gt; &lt;inertial&gt; &lt;origin xyz=&quot;2.77555756156289E-17 -1.98217916108079E-05 0&quot; rpy=&quot;0 0 0&quot; /&gt; &lt;mass value=&quot;0.176438810476987&quot; /&gt; &lt;inertia ixx=&quot;8.8965933887671E-05&quot; ixy=&quot;-4.17259369791981E-24&quot; ixz=&quot;2.75455648073554E-21&quot; iyy=&quot;8.89898462049032E-05&quot; iyz=&quot;5.21854052435048E-20&quot; izz=&quot;0.000130905430632044&quot; /&gt; &lt;/inertial&gt; &lt;visual&gt; &lt;origin xyz=&quot;0 0 0&quot; rpy=&quot;0 0 0&quot; /&gt; &lt;geometry&gt; &lt;mesh filename=&quot;package://smartcar_description/meshes/right_back_wheel.STL&quot; /&gt; &lt;/geometry&gt; &lt;material name=&quot;&quot;&gt; &lt;color rgba=&quot;1 1 0 1&quot; /&gt; &lt;/material&gt; &lt;/visual&gt; &lt;collision&gt; &lt;origin xyz=&quot;0 0 0&quot; rpy=&quot;0 0 0&quot; /&gt; &lt;geometry&gt; &lt;mesh filename=&quot;package://smartcar_description/meshes/right_back_wheel.STL&quot; /&gt; &lt;/geometry&gt; &lt;/collision&gt; &lt;/link&gt; &lt;joint name=&quot;right_back_wheel_joint&quot; type=&quot;continuous&quot;&gt; &lt;origin xyz=&quot;-0.12875 -0.1504 0.04&quot; rpy=&quot;1.5708 0 3.1416&quot; /&gt; &lt;parent link=&quot;base_link&quot; /&gt; &lt;child link=&quot;right_back_wheel&quot; /&gt; &lt;axis xyz=&quot;0 0 1&quot; /&gt; &lt;/joint&gt; &lt;/xacro:macro&gt; &lt;/robot&gt; gazebo.urdf.xacro 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113&lt;?xml version=&quot;1.0&quot;?&gt; &lt;robot xmlns:controller=&quot;http://playerstage.sourceforge.net/gazebo/xmlschema/#controller&quot; xmlns:interface=&quot;http://playerstage.sourceforge.net/gazebo/xmlschema/#interface&quot; xmlns:sensor=&quot;http://playerstage.sourceforge.net/gazebo/xmlschema/#sensor&quot; xmlns:xacro=&quot;http://ros.org/wiki/xacro&quot; name=&quot;smartcar_gazebo&quot;&gt; &lt;!-- ASUS Xtion PRO camera for simulation --&gt; &lt;!-- gazebo_ros_wge100 plugin is in kt2_gazebo_plugins package --&gt; &lt;xacro:macro name=&quot;smartcar_sim&quot;&gt; &lt;gazebo reference=&quot;base_footprint&quot;&gt; &lt;material&gt;Gazebo/Blue&lt;/material&gt; &lt;turnGravityOff&gt;false&lt;/turnGravityOff&gt; &lt;/gazebo&gt; &lt;gazebo reference=&quot;base_link&quot;&gt; &lt;material&gt;Gazebo/Blue&lt;/material&gt; &lt;/gazebo&gt; &lt;gazebo reference=&quot;right_front_wheel&quot;&gt; &lt;material&gt;Gazebo/FlatBlack&lt;/material&gt; &lt;/gazebo&gt; &lt;transmission name=&quot;right_front_wheel_joint_trans&quot;&gt; &lt;type&gt;transmission_interface/SimpleTransmission&lt;/type&gt; &lt;joint name=&quot;right_front_wheel_joint&quot; /&gt; &lt;actuator name=&quot;right_front_wheel_joint_motor&quot;&gt; &lt;hardwareInterface&gt;EffortJointInterface&lt;/hardwareInterface&gt; &lt;mechanicalReduction&gt;1&lt;/mechanicalReduction&gt; &lt;/actuator&gt; &lt;/transmission&gt; &lt;gazebo reference=&quot;right_back_wheel&quot;&gt; &lt;material&gt;Gazebo/FlatBlack&lt;/material&gt; &lt;/gazebo&gt; &lt;transmission name=&quot;right_back_wheel_joint_trans&quot;&gt; &lt;type&gt;transmission_interface/SimpleTransmission&lt;/type&gt; &lt;joint name=&quot;right_back_wheel_joint&quot; /&gt; &lt;actuator name=&quot;right_back_wheel_joint_motor&quot;&gt; &lt;hardwareInterface&gt;EffortJointInterface&lt;/hardwareInterface&gt; &lt;mechanicalReduction&gt;1&lt;/mechanicalReduction&gt; &lt;/actuator&gt; &lt;/transmission&gt; &lt;gazebo reference=&quot;left_front_wheel&quot;&gt; &lt;material&gt;Gazebo/FlatBlack&lt;/material&gt; &lt;/gazebo&gt; &lt;transmission name=&quot;left_front_wheel_joint_trans&quot;&gt; &lt;type&gt;transmission_interface/SimpleTransmission&lt;/type&gt; &lt;joint name=&quot;left_front_wheel_joint&quot; /&gt; &lt;actuator name=&quot;left_front_wheel_joint_motor&quot;&gt; &lt;hardwareInterface&gt;EffortJointInterface&lt;/hardwareInterface&gt; &lt;mechanicalReduction&gt;1&lt;/mechanicalReduction&gt; &lt;/actuator&gt; &lt;/transmission&gt; &lt;gazebo reference=&quot;left_back_wheel&quot;&gt; &lt;material&gt;Gazebo/FlatBlack&lt;/material&gt; &lt;/gazebo&gt; &lt;transmission name=&quot;left_back_wheel_joint_trans&quot;&gt; &lt;type&gt;transmission_interface/SimpleTransmission&lt;/type&gt; &lt;joint name=&quot;left_back_wheel_joint&quot; /&gt; &lt;actuator name=&quot;left_back_wheel_joint_motor&quot;&gt; &lt;hardwareInterface&gt;EffortJointInterface&lt;/hardwareInterface&gt; &lt;mechanicalReduction&gt;1&lt;/mechanicalReduction&gt; &lt;/actuator&gt; &lt;/transmission&gt; &lt;!-- position controller --&gt; &lt;gazebo&gt; &lt;plugin name=&quot;base_controller&quot; filename=&quot;libgazebo_ros_planar_move.so&quot;&gt; &lt;commandTopic&gt;cmd_vel&lt;/commandTopic&gt; &lt;odometryTopic&gt;odom&lt;/odometryTopic&gt; &lt;odometryFrame&gt;odom&lt;/odometryFrame&gt; &lt;odometryRate&gt;100.0&lt;/odometryRate&gt; &lt;robotBaseFrame&gt;base_footprint&lt;/robotBaseFrame&gt; &lt;/plugin&gt; &lt;/gazebo&gt;&lt;/xacro:macro&gt; &lt;/robot&gt; smartcar.urdf.xacro 12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;?xml version=&quot;1.0&quot;?&gt; &lt;robot name=&quot;smartcar&quot; xmlns:xi=&quot;http://www.w3.org/2001/XInclude&quot; xmlns:gazebo=&quot;http://playerstage.sourceforge.net/gazebo/xmlschema/#gz&quot; xmlns:model=&quot;http://playerstage.sourceforge.net/gazebo/xmlschema/#model&quot; xmlns:sensor=&quot;http://playerstage.sourceforge.net/gazebo/xmlschema/#sensor&quot; xmlns:body=&quot;http://playerstage.sourceforge.net/gazebo/xmlschema/#body&quot; xmlns:geom=&quot;http://playerstage.sourceforge.net/gazebo/xmlschema/#geom&quot; xmlns:joint=&quot;http://playerstage.sourceforge.net/gazebo/xmlschema/#joint&quot; xmlns:controller=&quot;http://playerstage.sourceforge.net/gazebo/xmlschema/#controller&quot; xmlns:interface=&quot;http://playerstage.sourceforge.net/gazebo/xmlschema/#interface&quot; xmlns:rendering=&quot;http://playerstage.sourceforge.net/gazebo/xmlschema/#rendering&quot; xmlns:renderable=&quot;http://playerstage.sourceforge.net/gazebo/xmlschema/#renderable&quot; xmlns:physics=&quot;http://playerstage.sourceforge.net/gazebo/xmlschema/#physics&quot; xmlns:xacro=&quot;http://ros.org/wiki/xacro&quot;&gt; &lt;xacro:include filename=&quot;$(find smartcar_description)/urdf/smartcar_body.urdf.xacro&quot; /&gt; &lt;!-- Body of SmartCar, with plates, standoffs and Create (including sim sensors) --&gt; &lt;smartcar_body/&gt; &lt;smartcar_sim/&gt; &lt;/robot&gt; 然后按照古月大神的方法启动并控制就可以了。下面我要说的就是我比较独特的部分了。现在大部分的移动机器人主要差动轮进行运动，只有linear.x和angular.z两个值，但是我的模型是４个瑞典轮，能提供横向的移动速度，即linear.y。这里对diff_controller进行修改让他能够接受linear.y。diff_controller.py在/opt/ros/indigo/lib/python2.7/dist-packages下。（可以用sudo vim进行修改），修改都已经注释过了（add by yang）。代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263#!/usr/bin/env python&quot;&quot;&quot; diff_controller.py - controller for a differential drive Copyright (c) 2010-2011 Vanadium Labs LLC. All right reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. * Neither the name of Vanadium Labs LLC nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL VANADIUM LABS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;&quot;&quot;import rospyfrom math import sin,cos,pifrom geometry_msgs.msg import Quaternionfrom geometry_msgs.msg import Twistfrom nav_msgs.msg import Odometryfrom diagnostic_msgs.msg import *from tf.broadcaster import TransformBroadcasterfrom ax12 import *from controllers import *from struct import unpackclass DiffController(Controller): &quot;&quot;&quot; Controller to handle movement &amp; odometry feedback for a differential drive mobile base. &quot;&quot;&quot; def __init__(self, device, name): Controller.__init__(self, device, name) self.pause = True self.last_cmd = rospy.Time.now() # parameters: rates and geometry self.rate = rospy.get_param(&apos;~controllers/&apos;+name+&apos;/rate&apos;,10.0) self.timeout = rospy.get_param(&apos;~controllers/&apos;+name+&apos;/timeout&apos;,1.0) self.t_delta = rospy.Duration(1.0/self.rate) self.t_next = rospy.Time.now() + self.t_delta self.ticks_meter = float(rospy.get_param(&apos;~controllers/&apos;+name+&apos;/ticks_meter&apos;)) self.base_width = float(rospy.get_param(&apos;~controllers/&apos;+name+&apos;/base_width&apos;)) self.base_frame_id = rospy.get_param(&apos;~controllers/&apos;+name+&apos;/base_frame_id&apos;, &apos;base_link&apos;) self.odom_frame_id = rospy.get_param(&apos;~controllers/&apos;+name+&apos;/odom_frame_id&apos;, &apos;odom&apos;) # parameters: PID self.Kp = rospy.get_param(&apos;~controllers/&apos;+name+&apos;/Kp&apos;, 5) self.Kd = rospy.get_param(&apos;~controllers/&apos;+name+&apos;/Kd&apos;, 1) self.Ki = rospy.get_param(&apos;~controllers/&apos;+name+&apos;/Ki&apos;, 0) self.Ko = rospy.get_param(&apos;~controllers/&apos;+name+&apos;/Ko&apos;, 50) # parameters: acceleration self.accel_limit = rospy.get_param(&apos;~controllers/&apos;+name+&apos;/accel_limit&apos;, 0.1) self.max_accel = int(self.accel_limit*self.ticks_meter/self.rate) # output for joint states publisher self.joint_names = [&quot;base_l_wheel_joint&quot;,&quot;base_r_wheel_joint&quot;] self.joint_positions = [0,0] self.joint_velocities = [0,0] # internal data self.v_left = 0 # current setpoint velocity self.v_right = 0 self.v_des_left = 0 # cmd_vel setpoint self.v_des_right = 0 self.enc_left = None # encoder readings self.enc_right = None self.x = 0 # position in xy plane self.y = 0 self.th = 0 self.dx = 0 # speeds in x/rotation self.dy = 0 # add by yang self.dr = 0 self.then = rospy.Time.now() # time for determining dx/dy # subscriptions rospy.Subscriber(&quot;cmd_vel&quot;, Twist, self.cmdVelCb) self.odomPub = rospy.Publisher(&quot;odom&quot;, Odometry, queue_size=5) self.odomBroadcaster = TransformBroadcaster() rospy.loginfo(&quot;Started yang DiffController (&quot;+name+&quot;). Geometry: &quot; + str(self.base_width) + &quot;m wide, &quot; + str(self.ticks_meter) + &quot; ticks/m.&quot;) def startup(self): if not self.fake: self.setup(self.Kp,self.Kd,self.Ki,self.Ko) def update(self): now = rospy.Time.now() if now &gt; self.t_next: elapsed = now - self.then self.then = now elapsed = elapsed.to_sec() if self.fake: x = cos(self.th)*self.dx*elapsed y = -sin(self.th)*self.dx*elapsed #self.x and self.y has changed for the effort of dy self.x += cos(self.th)*self.dx*elapsed + sin(self.th)*self.dy*elapsed self.y += sin(self.th)*self.dx*elapsed + cos(self.th)*self.dy*elapsed self.th += self.dr*elapsed else: # read encoders try: left, right = self.status() except Exception as e: rospy.logerr(&quot;Could not update encoders: &quot; + str(e)) return rospy.logdebug(&quot;Encoders: &quot; + str(left) +&quot;,&quot;+ str(right)) # calculate odometry if self.enc_left == None: d_left = 0 d_right = 0 else: d_left = (left - self.enc_left)/self.ticks_meter d_right = (right - self.enc_right)/self.ticks_meter self.enc_left = left self.enc_right = right d = (d_left+d_right)/2 th = (d_right-d_left)/self.base_width self.dx = d / elapsed self.dr = th / elapsed if (d != 0): x = cos(th)*d y = -sin(th)*d self.x = self.x + (cos(self.th)*x - sin(self.th)*y) self.y = self.y + (sin(self.th)*x + cos(self.th)*y) if (th != 0): self.th = self.th + th # publish or perish quaternion = Quaternion() quaternion.x = 0.0 quaternion.y = 0.0 quaternion.z = sin(self.th/2) quaternion.w = cos(self.th/2) self.odomBroadcaster.sendTransform( (self.x, self.y, 0), (quaternion.x, quaternion.y, quaternion.z, quaternion.w), rospy.Time.now(), self.base_frame_id, self.odom_frame_id ) odom = Odometry() odom.header.stamp = now odom.header.frame_id = self.odom_frame_id odom.pose.pose.position.x = self.x odom.pose.pose.position.y = self.y odom.pose.pose.position.z = 0 odom.pose.pose.orientation = quaternion odom.child_frame_id = self.base_frame_id odom.twist.twist.linear.x = self.dx odom.twist.twist.linear.y = self.dy #it was 0 before changed odom.twist.twist.angular.z = self.dr self.odomPub.publish(odom) if now &gt; (self.last_cmd + rospy.Duration(self.timeout)): self.v_des_left = 0 self.v_des_right = 0 # update motors if not self.fake: if self.v_left &lt; self.v_des_left: self.v_left += self.max_accel if self.v_left &gt; self.v_des_left: self.v_left = self.v_des_left else: self.v_left -= self.max_accel if self.v_left &lt; self.v_des_left: self.v_left = self.v_des_left if self.v_right &lt; self.v_des_right: self.v_right += self.max_accel if self.v_right &gt; self.v_des_right: self.v_right = self.v_des_right else: self.v_right -= self.max_accel if self.v_right &lt; self.v_des_right: self.v_right = self.v_des_right self.write(self.v_left, self.v_right) self.t_next = now + self.t_delta def shutdown(self): if not self.fake: self.write(0,0) def cmdVelCb(self,req): &quot;&quot;&quot; Handle movement requests. &quot;&quot;&quot; self.last_cmd = rospy.Time.now() if self.fake: self.dx = req.linear.x # m/s self.dy = req.linear.y # m/s add by yang self.dr = req.angular.z # rad/s else: # set motor speeds in ticks per 1/30s self.v_des_left = int( ((req.linear.x - (req.angular.z * self.base_width/2.0)) * self.ticks_meter) / 30.0) self.v_des_right = int( ((req.linear.x + (req.angular.z * self.base_width/2.0)) * self.ticks_meter) / 30.0) def getDiagnostics(self): &quot;&quot;&quot; Get a diagnostics status. &quot;&quot;&quot; msg = DiagnosticStatus() msg.name = self.name msg.level = DiagnosticStatus.OK msg.message = &quot;OK&quot; if not self.fake: msg.values.append(KeyValue(&quot;Left&quot;, str(self.enc_left))) msg.values.append(KeyValue(&quot;Right&quot;, str(self.enc_right))) msg.values.append(KeyValue(&quot;dX&quot;, str(self.dx))) msg.values.append(KeyValue(&quot;dR&quot;, str(self.dr))) return msg ### ### Controller Specification: ### ### setup: Kp, Kd, Ki, Ko (all unsigned char) ### ### write: left_speed, right_speed (2-byte signed, ticks per frame) ### ### status: left_enc, right_enc (4-byte signed) ### def setup(self, kp, kd, ki, ko): success = self.device.execute(253, AX_CONTROL_SETUP, [10, kp, kd, ki, ko]) def write(self, left, right): &quot;&quot;&quot; Send a closed-loop speed. Base PID loop runs at 30Hz, these values are therefore in ticks per 1/30 second. &quot;&quot;&quot; left = left&amp;0xffff right = right&amp;0xffff success = self.device.execute(253, AX_CONTROL_WRITE, [10, left%256, left&gt;&gt;8, right%256, right&gt;&gt;8]) def status(self): &quot;&quot;&quot; read 32-bit (signed) encoder values. &quot;&quot;&quot; values = self.device.execute(253, AX_CONTROL_STAT, [10]) left_values = &quot;&quot;.join([chr(k) for k in values[0:4] ]) right_values = &quot;&quot;.join([chr(k) for k in values[4:] ]) try: left = unpack(&apos;=l&apos;,left_values)[0] right = unpack(&apos;=l&apos;,right_values)[0] return [left, right] except: return None]]></content>
      <categories>
        <category>ros</category>
      </categories>
      <tags>
        <tag>ros</tag>
        <tag>横向移动</tag>
        <tag>机器人</tag>
        <tag>rviz</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[移动机器人中SW2URDF]]></title>
    <url>%2Fyangningbocn.github.io%2F2017%2F10%2F09%2F%E5%8E%9F-%E7%A7%BB%E5%8A%A8%E6%9C%BA%E5%99%A8%E4%BA%BA%E4%B8%ADSW2URDF%2F</url>
    <content type="text"><![CDATA[本博客只是个人学习记录使用，第一次写，瞎写写，内容比较粗糙。编写过程中，借鉴了古月居大神的smartcar以及其它一些大神的内容。 硕士课题中的移动机器人的SolidWorks三维模型转换为ros中的urdf文件的步骤如下： 准备工作： 1\. 安装SolidWorks，亲测2014和2016都可以，别的应该也行。 可从ROS-WIKI上下载，下载地址为[sw2urdf](https://bitbucket.org/brawner/sw2urdf/raw/cde91b4f1a2f2c768da55471fbec04cb34edd554/INSTALL/Output/sw2urdfSetup.exe) 2\. 在SW2016中，在工具 - file - export as URDF 开始工作： 打开模型，并执行export as URDF，稍等片刻可以看到一个选项卡 在选项卡中，你会看到link name 和 Global Origin Coordinate System，改不改都可以，我这里使用的是缺省值。Link Component 这里要选中你的小车的底盘部分（小tips：可以框框选中所有的零部件，然后在点击轮子就会反选了，一开始不知道费了很大劲。）Number of child links 这里根据你轮子的个数选择，我使用的是4，因为我有四个轮。设置完成之后如下图所示： 接下来点击最下方生成出来的Empty_Link，接下来的界面如下： 这里只修改Link name、joint name和Link Components。Link name 和 joint name只修改了名字，Link Components选择了轮子，完成图如下 第4步的步骤重复3遍，就可以完成其它3个轮子了。 以上步骤都完成之后，如下图所示 然后点击 Preview and Export..稍等片刻之后，如下图所示在这里可以把Joint Type 选为continous，我也不知道具体有啥用，知道的可以给我说一下。Origin中z轴位置要稍微改一下，因为我的轮子直径是8cm，我填写的为0.04，这样在rviz中显示的时候他就在地面上了。相应的base_link的visual中的z值也要相应的进行调整。 然后点击next，finish，选择好路径，还有名字我这里沿用的古月大神的smartcar_description，不过要把后缀去掉，因为这里生成的是文件夹。 这样就算完成了，放到ros中把代码进行修改，并转化为xacro格式就可以launch起来了。 代码如下： &lt;span class=&quot;hljs-pi&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;robot&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;smartcar&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;xmlns:xacro&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;http://ros.org/wiki/xacro&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;xacro:property&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;M_PI&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;3.14159&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- Macro for SmartCar body. Including Gazebo extensions, but does not include Kinect --&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;xacro:include&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;filename&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;$(find smartcar_description)/urdf/gazebo.urdf.xacro&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;xacro:property&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;base_x&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0.33&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;xacro:property&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;base_y&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0.33&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;xacro:macro&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;smartcar_body&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;base_footprint&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;inertial&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;mass&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0.0001&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;xyz&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0 0 0&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;inertia&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;ixx&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0.0001&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;ixy&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0.0&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;ixz&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0.0&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;iyy&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0.0001&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;iyz&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0.0&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;izz&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0.0001&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;inertial&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;visual&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;xyz&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0 0 0&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;rpy&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0 0 0&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;geometry&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;box&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;size&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0.001 0.001 0.001&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;geometry&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;visual&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;link&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;joint&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;base_footprint_joint&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;fixed&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;xyz&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0 0 0&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;rpy&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0 0 0&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;link&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;base_footprint&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;link&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;base_link&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;joint&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;link &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;base_link&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;inertial&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;origin &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;xyz&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0.0032273 -0.060593 1.3595E-05&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;rpy&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0 0 0&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;mass &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;4.2623&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;inertia &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;ixx&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0.04568&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;ixy&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;-0.00094545&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;ixz&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;-8.9814E-06&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;iyy&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0.11402&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;iyz&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;5.3399E-06&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;izz&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0.11035&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;inertial&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;visual&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;origin &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;xyz&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0 0 0.23&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;rpy&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0 0 0&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;geometry&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;mesh &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;filename&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;package://smartcar_description/meshes/base_link.STL&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;geometry&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;material &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;color &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;rgba&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;1 1 1 1&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;material&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;visual&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;collision&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;origin &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;xyz&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0 0 0.23&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;rpy&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0 0 0&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;geometry&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;mesh &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;filename&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;package://smartcar_description/meshes/base_link.STL&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;geometry&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;collision&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;link&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;link &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;left_front_wheel&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;inertial&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;origin &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;xyz&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0 -1.98217916108356E-05 0&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;rpy&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0 0 0&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;mass &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0.176438810476987&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;inertia &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;ixx&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;8.8965933887671E-05&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;ixy&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;-1.27636183461175E-23&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;ixz&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;8.0831821149659E-23&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;iyy&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;8.89898462049031E-05&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;iyz&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;2.16519665002917E-23&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;izz&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0.000130905430632044&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;inertial&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;visual&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;origin &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;xyz&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0 0 0&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;rpy&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0 0 0&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;geometry&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;mesh &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;filename&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;package://smartcar_description/meshes/left_front_wheel.STL&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;geometry&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;material &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;color &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;rgba&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;1 1 0 1&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;material&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;visual&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;collision&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;origin &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;xyz&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0 0 0&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;rpy&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0 0 0&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;geometry&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;mesh &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;filename&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;package://smartcar_description/meshes/left_front_wheel.STL&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;geometry&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;collision&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;link&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;joint &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;left_front_wheel_joint&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;continuous&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;origin &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;xyz&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0.12875 0.1504 0.04&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;rpy&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;1.5708 0 0&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;parent &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;link&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;base_link&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;child &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;link&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;left_front_wheel&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;axis &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;xyz&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0 0 1&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;joint&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;link &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;right_front_wheel&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;inertial&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;origin &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;xyz&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0 -1.98217916108079E-05 0&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;rpy&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0 0 0&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;mass &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0.176438810476987&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;inertia &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;ixx&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;8.8965933887671E-05&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;ixy&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;-1.27636183461175E-23&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;ixz&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;8.08318211496588E-23&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;iyy&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;8.89898462049032E-05&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;iyz&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;2.18596653030412E-23&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;izz&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0.000130905430632044&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;inertial&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;visual&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;origin &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;xyz&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0 0 0&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;rpy&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0 0 0&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;geometry&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;mesh &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;filename&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;package://smartcar_description/meshes/right_front_wheel.STL&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;geometry&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;material &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;color &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;rgba&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;1 1 0 1&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;material&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;visual&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;collision&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;origin &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;xyz&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0 0 0&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;rpy&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0 0 0&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;geometry&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;mesh &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;filename&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;package://smartcar_description/meshes/right_front_wheel.STL&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;geometry&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;collision&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;link&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;joint &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;right_front_wheel_joint&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;continuous&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;origin &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;xyz&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0.12875 -0.1504 0.04&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;rpy&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;1.5708 0 0&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;parent &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;link&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;base_link&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;child &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;link&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;right_front_wheel&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;axis &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;xyz&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0 0 1&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;joint&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;link &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;left_back_wheel&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;inertial&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;origin &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;xyz&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0 -1.98217916108356E-05 0&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;rpy&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0 0 0&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;mass &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0.176438810476987&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;inertia &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;ixx&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;8.8965933887671E-05&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;ixy&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;-1.27300145019925E-23&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;ixz&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;8.0831821149659E-23&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;iyy&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;8.89898462049032E-05&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;iyz&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;2.16519665002917E-23&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;izz&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0.000130905430632044&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;inertial&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;visual&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;origin &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;xyz&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0 0 0&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;rpy&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0 0 0&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;geometry&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;mesh &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;filename&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;package://smartcar_description/meshes/left_back_wheel.STL&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;geometry&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;material &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;color &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;rgba&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;1 1 0 1&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;material&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;visual&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;collision&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;origin &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;xyz&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0 0 0&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;rpy&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0 0 0&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;geometry&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;mesh &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;filename&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;package://smartcar_description/meshes/left_back_wheel.STL&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;geometry&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;collision&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;link&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;joint &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;left_back_wheel_joint&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;continuous&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;origin &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;xyz&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;-0.12875 0.1504 0.04&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;rpy&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;1.5708 0 0&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;parent &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;link&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;base_link&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;child &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;link&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;left_back_wheel&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;axis &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;xyz&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0 0 1&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;joint&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;link &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;right_back_wheel&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;inertial&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;origin &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;xyz&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;2.77555756156289E-17 -1.98217916108079E-05 0&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;rpy&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0 0 0&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;mass &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0.176438810476987&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;inertia &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;ixx&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;8.8965933887671E-05&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;ixy&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;-4.17259369791981E-24&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;ixz&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;2.75455648073554E-21&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;iyy&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;8.89898462049032E-05&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;iyz&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;5.21854052435048E-20&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;izz&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0.000130905430632044&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;inertial&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;visual&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;origin &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;xyz&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0 0 0&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;rpy&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0 0 0&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;geometry&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;mesh &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;filename&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;package://smartcar_description/meshes/right_back_wheel.STL&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;geometry&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;material &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;color &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;rgba&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;1 1 0 1&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;material&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;visual&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;collision&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;origin &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;xyz&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0 0 0&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;rpy&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0 0 0&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;geometry&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;mesh &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;filename&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;package://smartcar_description/meshes/right_back_wheel.STL&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;geometry&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;collision&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;link&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;joint &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;right_back_wheel_joint&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;continuous&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;origin &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;xyz&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;-0.12875 -0.1504 0.04&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;rpy&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;1.5708 0 3.1416&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;parent &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;link&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;base_link&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;child &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;link&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;right_back_wheel&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;axis &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;xyz&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0 0 1&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;joint&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;xacro:macro&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;robot&lt;/span&gt;&amp;gt;&lt;/span&gt; 作者：ynb19930428发表于2017/10/9 9:46:33 原文链接 阅读：150评论：2查看评论]]></content>
      <categories>
        <category>ros</category>
      </categories>
      <tags>
        <tag>ros</tag>
        <tag>robot</tag>
        <tag>sw2urdf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo安装使用和优化]]></title>
    <url>%2Fyangningbocn.github.io%2F2017%2F01%2F20%2Fhexo%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8%E5%92%8C%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[本文主要使用GitHub pages + hexo 来搭建个人博客，作日常学习使用。在这里只提主要步骤，不提具体过程，需要的话自行谷歌。 安装与配置 安装1.git2.Node.js进入官网[官网链接](https://nodejs.org/en/) 下载安装包，直接点击安装就可以了 3.hexo这一步在命令行下做 npm install -g hexo-cli cd *your direction* hexo init npm install hexo server - Hexo - Blogs - Github 打开浏览器输入 http://0.0.0.0:4000/ 出现hexo说明成功接下来是修改主题，你也可以去下别的主题很多，自行谷歌 cd themes git clone https://github.com/litten/hexo-theme-next.git 然后打开Hexo文件夹下面的_config.yml文件，修改里面的theme为next重新打开server，浏览器输入http://0.0.0.0:4000/查看主题。 GitHub配置1.仓库创建一个仓库名称为yangningbocn.github.io这里要把yangningbocn换成你自己的GitHub用户名 2.配置SSH配置hexo1.配置hexo目录下的_config.yml文件# Deployment ## Docs: http://hexo.io/docs/deployment.html deploy: type: git repository: https://github.com:yangningbocn/yangningbocn.github.io.git branch: master name: Ningbo Yang emai: yangningbocn@gmail.com 2.测试cd到hexo的根目录下 hexo clean hexo g hexo d 优化 1.git安装npm install hexo-deployer-git --save 2.迁移支持很多种迁移方式，我采用的是RSS的，其他可以看官网hexo迁移官网 npm install hexo-migrator-rss --save hexo migrate rss &lt;source&gt; 3.图片插入npm install https://github.com/CodeFalling/hexo-asset-image --save 然后把图片放入对应文章的配套文件夹下，比如1.png 4.Google收录npm install hexo-generator-sitemap --save [Google站长收录网站](https://www.google.com/webmasters/tools/home?hl=zh-CN) 5.文章访问量统计使用LeanCloud，评论也可以使用它，省心。参考博客 6.local research本地搜索很好用。在主题配置文件中修改local research就好 7.RSS使用 Hexo 生成的 Feed 链接。 你可以需要先安装 hexo-generator-feed 插件。 next官网 http://theme-next.iissnan.com/ 8.阅读时长插件npm install hexo-wordcount –save]]></content>
      <categories>
        <category>IT</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Blogs</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[免费翻墙]]></title>
    <url>%2Fyangningbocn.github.io%2F2017%2F01%2F20%2F%E5%8E%9F-%E5%A6%82%E6%9E%9C%E5%85%8D%E8%B4%B9%E7%BF%BB%E5%A2%99%2F</url>
    <content type="text"><![CDATA[1.打开ishadowishadow的网址为(https://global.ishadowx.net/) 2.下拉并找到SS下载ss到计算机，如果是手机下载相应的app 3.解压缩解压缩完了之后尽量不要放在桌面，放在一个文件夹中，因为它会产生一些配置文件，并放个快捷方式到桌面 4.get free ss 在刚才打开的网页上找到GET FREE SS的按钮 然后点击，会跳到一堆美食图片那里 然后随便选一个，鼠标放上去 点击click to View QR Code 这时候屏幕上回出现一个二维码 这时候不要关右键右下角的小飞机图标 服务器-&gt;扫描屏幕上的二维码 在弹出的窗口上点击确定 然后启动系统代理，尽情的享受外面的世界吧。]]></content>
      <categories>
        <category>IT</category>
      </categories>
      <tags>
        <tag>shadowsocks</tag>
        <tag>免费翻墙</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[gazebo中机器人横向移动]]></title>
    <url>%2Fyangningbocn.github.io%2F2017%2F01%2F10%2F%E5%9C%A8gazebo%E4%B8%AD%E5%90%AF%E5%8A%A8%E7%A7%BB%E5%8A%A8%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%A8%A1%E5%9E%8B%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8%2F</url>
    <content type="text"><![CDATA[本博客只是个人学习记录使用，瞎写写，内容比较粗糙。编写过程中，借鉴了yaked大神的实战youBot和ROS-WIKI以及其它一些大神的内容。现在大部分的移动机器人主要差动轮进行运动，只有linear.x和angular.z两个值，但是我的模型是４个瑞典轮，能提供横向的移动速度，即linear.y。在gazebo中的横向移动同样要修改控制方式，只不过在与rviz不同，不能直接修改，文件格式打不开，这里采用的方案是直接在xacro中加载一个平面移动的插件就可以了 &lt;!-- position controller --&gt; &lt;gazebo&gt; &lt;plugin name=&quot;base_controller&quot; filename=&quot;libgazebo_ros_planar_move.so&quot;&gt; &lt;commandTopic&gt;cmd_vel&lt;/commandTopic&gt; &lt;odometryTopic&gt;odom&lt;/odometryTopic&gt; &lt;odometryFrame&gt;/odom&lt;/odometryFrame&gt; &lt;odometryRate&gt;100.0&lt;/odometryRate&gt; &lt;robotBaseFrame&gt;base_footprint&lt;/robotBaseFrame&gt; &lt;broadcastTF&gt;true&lt;/broadcastTF&gt; &lt;/plugin&gt; &lt;/gazebo&gt;` 模型xacro加载到gazebo沿用yaked大神博客中的gazebo.launch进行修改，把自己的模型修改到他的launch文件中，就可以了。＇ gazebo加入上面的代码]]></content>
      <categories>
        <category>ros</category>
      </categories>
      <tags>
        <tag>ROS</tag>
        <tag>横向移动</tag>
        <tag>机器人</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fyangningbocn.github.io%2F2017%2F01%2F10%2Fexample%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>examples</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Blogs</tag>
        <tag>Github</tag>
      </tags>
  </entry>
</search>
